source("rlib/package_utils.R")
ls()
install_and_load("getopt")
library(getopt)
install_and_load("DBI")
install_and_load("RJDBC")
install_and_load("odbc")
install_and_load("dblyr")
install_and_load("dplyr")
install_and_load("sparklyr")
install_and_load("checkpoint")
install_and_load("Rtools")
install_and_load("Rtool")
library(odbc)
install_and_load()
source("rlib/packages.R")
getw()
getwd()
source("sandbox/phm/rlib/packages.R")
source("sandbox/phm/rlib/package_utils.R")
install_and_load("gsubfn")
install_and_load("ggplot2")
install_and_load("shiny")
install_and_load
seq(10,2,-1)
getwd()
seq(as.date("2019-07-01"), as.date("2019-07-10"), by="day")
seq(as.Date("2019-07-01"), as.Date("2019-07-10"), by="day")
seq(as.Date("2019-07-01"), as.Date("2019-07-07"), by="day")
seq(as.Date("2019-07-01"), as.Date("2019-07-01"), by="day")
seq(as.Date("2019-07-01"), as.Date("2019-07-02"), by="day")
sourece("xxx.R")
source("xxx.R")
source("xxx.R")
help(format)
help("as.Date")
source("xxx.R")
source("xxx.R")
source("xxx.R")
source("xxx.R")
x <- seq(as.Date("2019-01-01"),as.Date("2019-01-31"),by="day")
x
x[1]
y=x[2-]
y=x[2:]
y=x[2:nrow(x)]
y=x[2:length(x)]
y
y=x[-1]
y
y=x[-2]
y
help(grepl)
x="abababababababbdddddbbeeee"
grep("ab",x,value=TRUE)
grep("a",x,value=TRUE)
x
grep("bb",x,value=TRUE)
grep("bb",x,value=False)
grep("bb",x,value=FALSE)
grepl("bb",x,value=TRUE)
grepl("bb",x)
grepl
gregexpr("bb",x)
regexpr("bb",x)
gregexpr("b+",x)
regmatches(x,gregexpr("bb",x))
sprintf("INFO: %s", regmatches(x,gregexpr("bb",x)))
sprintf("INFO: %s", paste(regmatches(x,gregexpr("bb",x))))
sprintf("INFO: %s", c(regmatches(x,gregexpr("bb",x))))
sprintf("INFO: %s", unlist(regmatches(x,gregexpr("bb",x))))
paste("INFO:", regmatches(x,gregexpr("bb",x)))
regmatches(x,gregexpr("bb",x))
regmatches(x,gregexpr("r",x))
regmatches(x,gregexpr("r",x))[[1]]
regmatches(x,gregexpr("bb",x))[11]]
regmatches(x,gregexpr("bb",x))[[1]]
regmatches(x,gregexpr("bb",x))[[1]]
regmatches(x,gregexpr("bbb",x))[[1]]
sprintf("INFO: %s",regmatches(x,gregexpr("bb",x))[[1]])
regmatches(x,gregexpr("bb",x))[[1]]
sprintf("INFO: %s",regmatches(x,gregexpr("bb",x))[[1]])
regmatches(x,gregexpr("bb",x))[[1]])
regmatches(x,gregexpr("bb",x))[[1]]
regmatches(x,regexpr("bb",x))[[1]]
regmatches(x,gregexpr("bb",x))[[1]]
regmatches(x,gregexpr("bb",x))
regmatches(x,gregexpr("bb",x))[[1]]
print(regmatches(x,gregexpr("bb",x))[[1]])
print(paste("INFO:", regmatches(x,gregexpr("bb",x))[[1]]))
paste(regmatches(x,gregexpr("bb",x)))
paste(regmatches(x,gregexpr("bb",x))[[1]])
print(paste("INFO:",paste(regmatches(x,gregexpr("bb",x))[[1]]))
)
regmatches(x,gregexpr("bb",x))
unlist(regmatches(x,gregexpr("bb",x)))
paste(unlist(regmatches(x,gregexpr("bb",x))))
c(unlist(regmatches(x,gregexpr("bb",x))))
paste(
regmatches(x,gregexpr("bb",x)))
paste(
regmatches(x,gregexpr("bb",x)))
paste(
regmatches(x,gregexpr("bb",x)),collapse = "")
regmatches(x,gregexpr("bb",x))
paste(
unlist(regmatches(x,gregexpr("bb",x)))
,collapse = "")
paste(
unlist(regmatches(x,gregexpr("bb",x)))
,collapse = " ")
paste(unlist(regmatches(x,gregexpr("bbb",x))),collapse = " ")
paste("INFO:", unlist(regmatches(x,gregexpr("bbb",x))),collapse = " ")
paste("INFO:", unlist(regmatches(x,gregexpr("bb",x))),collapse = " ")
paste("INFO:", unlist(regmatches(x,gregexpr("bb",x))),collapse = "")
paste("INFO:", unlist(regmatches(x,gregexpr("bb",x))),collapse = " ")
x = c(1,3,5,7,9)
y = c(2,4,6,8,10)
i=c(2,4)
x[i] = t[i]
x[1]
i
x[i] = y[i]
x
colnames()
x=c("aaa","bbb")
print(x)
paste(x)
paste(x)
paste0(x)
nrow(x)
nchar(x)
str(c)
str(x)
as.string()
paste(x, collapse = '')
paste(x, collapse = ' ')
l=list()
nrow(l)
nrow(data.frame())
f<- function() { }
is.na(f)
gwtwd()
getwd()
source("xxx.R")
dbDisconnect(conn)
help("write.table")
suppressWarnings
help(suppressWarnings)
pwd
pwd
suppressWarnings()
suppressWarnings()
suppresswarnings()
nrow(data.frame))
nrow(data.frame)
nrow(data.frame())
as.string(1.1)
as.string(1.1)
as.String(1.1)
as.character(1.1)
toString(1.1
)
toString(1.1444444)
to.charactor(1.1444444)
to.character(1.1444444)
as.character(1.1444444)
length("")
nchar("")
help(order)
help(order)
as.integer("33")
as.integer("33")
__LINE__ <- function() { 1 }
LINENO <- function() { 1 }
LINENO()
traceback()
LINENO <- function() { traceback() }
LINENO()
LINENO <- function() { x=1; traceback() }
LINENO()
help(traceback)
help(as.numeric)
help(as.double)
1675/60
pwd
help_substr)
help(substr)
grep("^II", "IIIIII")
grep("^II", "1IIIIII")
mysrc
mysrc("xxx.R")
mysrc
mysrc("xxx.R")
mysrc("xxx.R")
colnames(df)
grepl("b",df$n)
grepl("B",df$n)
df <- rbinc(df, c("E",5))
df <- rbind(df, c("E",5))
df
grepl("B",df$n)
grepl("b",df$n)
as.integer(grepl("b",df$n))
sum(as.integer(grepl("b",df$n)))
sum(as.integer(grepl("B",df$n)))
mysrc("xxx.R")
df
mysrc("xxx.R")
df <- rbind(df, c("E",5))
df
getwd()
mysrc("xxx.R")
x=c(1,2,3,4,5,6,7,8)
y=c(3,4,5,6,7,8,9)
intersection(x,y)
intersect(x,y)
nrow(intersect(x,y))
length(intersect(x,y))
intersect(x,y)[3]
x=1:9
y=8:6
x
y
y=8:4
x
y
intersect(x,y)
pwd
help(print)
pwd
pwd
getwd()
ls()
mysrc("xxx.R")
params
print(params)
mysrc("xxx.R")
param_sets
param_sets[[1]]
param_sets[[2]]
param_sets[,1]
param_sets[]
param_sets$`11113`
str(param_sets)
param_sets[1:3]
param_sets[1:3][1,1]
param_sets[1:3]
param_sets[1:3][,1]
nrow(param_sets[1:3])
length(param_sets[1:3])
length(param_sets)
param_sets[[1]][,1]
param_sets[[1]][1,1]
param_sets[[]][1,1]
param_sets[[1:3]][1,1]
param_sets[1:3][1,1]
param_sets[1][1,1]
param_sets[[1]][1,1]
params
params[,1]
unlist(param_sets)
params[,1]
params
colnames(params)
nrow(params)
ncol(params)
ncol()
mysrc("xxx.R")
param_sets
names(param_sets)
grepl("LLS", names(param_sets))
grep("LLS", names(param_sets))
grep("Wash", names(param_sets))
grep("wash", names(param_sets))
grep("Status", names(param_sets))
mysrc("xxx.R")
mysrc("xxx.R")
mysrc("xxx.R")
lls_ihn_level3_desc
status_ihn_level3_desc
pwd
pwd
pwd
help(subset)
help(subset)
cd sand*
as.Date()
as.Date("20190909")
as.Date("20190909050505". format="%Y%m%d)
as.Date("20190909050505", format="%Y%m%d)
as.Date("20190909050505", format="%Y%m%d)
as.Date("20190909050505", format="%Y%m%d")
as.Date("20190909050505", format="%Y%m%d")+1
install_and_load("tidyverse")
ls()
pwd
getwd()
pwd
pwd
load_and_install("pillar")
install_and_load("pillar")
getwd()
x=read.csv("xxx.csv")
x
read.csv
x=read.csv("xxx.csv")
nrow(x)
x
names(x)
f=x[x$FLAG_YN==1,]
f
nf=x[x$FLAG_YN!=1,]
nrow(nf)
nrow(f)
nrow(x)
fr=read.csv("fr.csv")
fr
mysrc("pfp.R")
pfp(fr)
mysrc("pfp.R")
mysrc("pfp.R")
pfp2(fr)
mysrc("pfp.R")
pfp2(fr)
mysrc("pfp.R")
pfp2(fr)
mysrc("pfp.R")
pfp2(fr)
mysrc("pfp.R")
pfp2(fr)
mysrc("pfp.R")
pfp2(fr)
mysrc("pfp.R")
pfp2(fr)
table(fr[,"MODULESN"])
c(table(fr[,"MODULESN"]))
table(fr[,"MODULESN"])
tf=table(fr[,"MODULESN"])
str9tf)
str(tf)
colnames(tf)
ncol(tf)
length(tf)
is.list(tf)
is.vector(tf)
is.matrix(tf)
is.data.frame(tf)
type(tf)
typeof(tf)
dim(tf)
is.vector(tf)
is.array(tf)
names(tf)
tf[names(tf)] > 1
mysrc("pfp.R")
pfp3(tf)
pfp3(fr)
mysrc("pfp.R")
pfp3(fr)
lf
pwd
pwd
r-read.csv("jun_testing/wam_a/results.csv")
r=read.csv("jun_testing/wam_a/results.csv")
r
rf = r[r$FLAG_YN==1,]
rf
nrow(rf)
nrow(r)
rf=rf %<% distinct(PHN_PATTERNS_SK,PL,SN,CHART_DATA_VALUE,FLAG_YN,IHN_LEVEL3_DESC,.keep_all = TRUE)
rf=rf %>% distinct(PHN_PATTERNS_SK,PL,SN,CHART_DATA_VALUE,FLAG_YN,IHN_LEVEL3_DESC,.keep_all = TRUE)
rf
nrow(rf)
nrow(r)
r2=r %>% distinct(PHN_PATTERNS_SK,PL,SN,CHART_DATA_VALUE,FLAG_YN,IHN_LEVEL3_DESC,.keep_all = TRUE)
nrow(r2)
setwd("d:/sandbox/ml")
gwtwd()
getwd()
pwd
getwd()
system("ls")
system("/bin/ls")
system("dir")
setwd("ch1")
getwd()
setwd("packt-neural.networks.with.r")"
""
setwd("packt-neural.networks.with.r")
setwd("ch1")
getwd()
setwd("D:/sandbox/ml/packt-neural.networks.with.r")
setwd("D:/sandbox/ml/packt-neural.networks.with.r/ch1")
op <- par(mar = c(10, 4, 4, 2) + 0.1) #margin formatting
barplot(mtcars$mpg,
names.arg = row.names(mtcars),
las = 2,
ylab = "Fuel Efficiency in Miles per Gallon")
head(mtcars)
pairs(mtcars[1:7], lower.panel = NULL)
plot(y = mtcars$mpg, x = mtcars$wt, xlab = "Vehicle Weight",
ylab = "Vehicle Fuel Efficiency in Miles per Gallon")
mt.model <- lm(formula = mpg ~ wt, data = mtcars)
coef(mt.model)
?lm
setwd("D:/sandbox/ml/packt-neural.networks.with.r/ch2")
head(mtcars)
head(mtcars)
plot(y = mtcars$mpg, x = mtcars$disp, xlab = "Engine Size (cubic inches)",
ylab = "Fuel Efficiency (Miles per Gallon)")
model <- lm(mtcars$mpg ~ mtcars$disp)
coef(model)
print(model)
summary(model)
split_size = 0.8
sample_size = floor(split_size * nrow(mtcars))
set.seed(123)
train_indices <- sample(seq_len(nrow(mtcars)), size = sample_size)
train <- mtcars[train_indices, ]
test <- mtcars[-train_indices, ]
test
train_indices <- sample(seq_len(nrow(mtcars)), size = sample_size)
train <- mtcars[train_indices, ]
test <- mtcars[-train_indices, ]
test
train
train
test
names(train)
model2 <- lm(mpg ~ disp, data = train)
new.data <- data.frame(disp = test$disp)
test$output <- predict(model2, new.data)
sqrt(sum(test$mpg - test$output)^2/nrow(test))
plot(x = mtcars$mpg, y = mtcars$am, xlab = "Fuel Efficiency (Miles per Gallon)",
ylab = "Vehicle Transmission Type (0 = Automatic, 1 = Manual)")
library(caTools)
install_and_load("caTools")
library(caTools)
Label.train = train[, 9]
Data.train = train[, -9]
model = LogitBoost(Data.train, Label.train)
Data.test = test
Lab = predict(model, Data.test, type = "raw")
data.frame(row.names(test), test$mpg, test$am, Lab)
plot(x = iris$Petal.Length, y = iris$Petal.Width, xlab = "Petal Length",
ylab = "Petal Width")
data = data.frame(iris$Petal.Length, iris$Petal.Width)
iris.kmeans <- kmeans(data, 2)
plot(x = iris$Petal.Length, y = iris$Petal.Width, pch = iris.kmeans$cluster,
xlab = "Petal Length", ylab = "Petal Width")
points(iris.kmeans$centers, pch = 8, cex = 2)
iris.kmeans3 <- kmeans(data, 3)
plot(x = iris$Petal.Length, y = iris$Petal.Width, pch = iris.kmeans3$cluster,
xlab = "Petal Length", ylab = "Petal Width")
points(iris.kmeans3$centers, pch = 8, cex = 2)
par(mfrow = c(1, 2))
plot(x = iris$Petal.Length, y = iris$Petal.Width, pch = iris.kmeans3$cluster,
xlab = "Petal Length", ylab = "Petal Width", main = "Model Output")
plot(x = iris$Petal.Length, y = iris$Petal.Width,
pch = as.integer(iris$Species),
xlab = "Petal Length", ylab = "Petal Width", main = "Actual Data")
# look at the confusion matrix
table(iris.kmeans3$cluster, iris$Species)
install_and_load("party")
