# chapter 4 - NumPy basics: Arrays and vectorized computations
#
#
# what is offerred by NumPy:
# fast vectorized array operations.
# sorting, unique, set operations
# stats
# merging and joining data sets
# aggregation, transformation, function application
#
# comparison of performance
#
import numpy as np
my_arr = np.arange(1000000)
my_list = list(range(1000000))
get_ipython().run_line_magic('time', 'for _ in range(10): my_arr2= my_arr*2')
get_ipython().run_line_magic('time', 'for _ in range(10): my_list2 = [x*2 for x in my_list]')
#
# NumPy ndarray - multi-dim array objct
#
data = np.random.randn(2,3)
data
#[Out]# array([[-0.5136182 ,  0.58063106, -0.23625861],
#[Out]#        [-0.84166211, -0.00369914,  0.33570902]])
data*10
#[Out]# array([[-5.13618203,  5.80631058, -2.36258608],
#[Out]#        [-8.41662105, -0.03699143,  3.3570902 ]])
data+data
#[Out]# array([[-1.02723641,  1.16126212, -0.47251722],
#[Out]#        [-1.68332421, -0.00739829,  0.67141804]])
data.shape
#[Out]# (2, 3)
data.dtype
#[Out]# dtype('float64')
#
# how to create ndarrays
#
data1 = [6,7.5,8,0,1]
arr1 = np.array(data1)
arr1
#[Out]# array([6. , 7.5, 8. , 0. , 1. ])
data2=[[1,2,3,4],[5,6,7,8]]
arr2 = np.array(data2)
arr2
#[Out]# array([[1, 2, 3, 4],
#[Out]#        [5, 6, 7, 8]])
arr2.ndim
#[Out]# 2
arr2.shape
#[Out]# (2, 4)
# 
# other functions for creating new arrays
#
np.zeros(10)
#[Out]# array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
np.zeros((3,6))
#[Out]# array([[0., 0., 0., 0., 0., 0.],
#[Out]#        [0., 0., 0., 0., 0., 0.],
#[Out]#        [0., 0., 0., 0., 0., 0.]])
np.empty((2,3,2))
#[Out]# array([[[6.95332637e-310, 0.00000000e+000],
#[Out]#         [0.00000000e+000, 0.00000000e+000],
#[Out]#         [0.00000000e+000, 0.00000000e+000]],
#[Out]# 
#[Out]#        [[0.00000000e+000, 0.00000000e+000],
#[Out]#         [0.00000000e+000, 0.00000000e+000],
#[Out]#         [0.00000000e+000, 0.00000000e+000]]])
np.empty((2,3,2))
#[Out]# array([[[6.95332637e-310, 0.00000000e+000],
#[Out]#         [0.00000000e+000, 0.00000000e+000],
#[Out]#         [0.00000000e+000, 0.00000000e+000]],
#[Out]# 
#[Out]#        [[0.00000000e+000, 0.00000000e+000],
#[Out]#         [0.00000000e+000, 0.00000000e+000],
#[Out]#         [0.00000000e+000, 0.00000000e+000]]])
np.arange(14)
#[Out]# array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13])
#
# array creation functions
#
# array, asarray, arange, ones, ones_like, zeros, zeros_like,
# empty, empty_like, full, full_like, eye, identity.
#
# can specify type for ndarray: types are:
# int8, uint8, int16, uint16, int32, uint32,
# int64, uint64, float16, float32, float64, float128,
# complex64, complex128, complex256
# bool, object (any python object), string, unicode
#
#
arr = np.array([1,2,3,4,5])
arr.dtype
#[Out]# dtype('int64')
float_ar = arr.astype(np.float64)
float_ar
#[Out]# array([1., 2., 3., 4., 5.])
float_ar.dtype
#[Out]# dtype('float64')
numeric_strings = np.array(['1.25','-9.6','43'], dtype=np.string_)
numeric_strings.astype(float)
#[Out]# array([ 1.25, -9.6 , 43.  ])
numeric_strings.astype(np.float)
#[Out]# array([ 1.25, -9.6 , 43.  ])
int_array = np.arange(10)
calibers = np.array([.22,.270,.357,.380,.44,.50],dtype=np.float64)
int_array.astype(calibers.dtype)
#[Out]# array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])
# above example use a dtype=float64 as the target.
#
empty_unit32 = np.empty(8,dtype='u4') # short-hand code strings
empty_unit32
#[Out]# array([         0, 1075314688,          0, 1075707904,          0,
#[Out]#        1075838976,          0, 1072693248], dtype=uint32)
#
#
# arithmetic using NumPy arrays
#
#
arr = np.array([[1,2,3],[4,5,6]])
arr
#[Out]# array([[1, 2, 3],
#[Out]#        [4, 5, 6]])
arr*arr
#[Out]# array([[ 1,  4,  9],
#[Out]#        [16, 25, 36]])
arr - arr
#[Out]# array([[0, 0, 0],
#[Out]#        [0, 0, 0]])
arr **2
#[Out]# array([[ 1,  4,  9],
#[Out]#        [16, 25, 36]])
arr **2 **2
#[Out]# array([[   1,   16,   81],
#[Out]#        [ 256,  625, 1296]])
arr **2 **2 *82
#[Out]# array([[    82,   1312,   6642],
#[Out]#        [ 20992,  51250, 106272]])
arr **2 **2 *2
#[Out]# array([[   2,   32,  162],
#[Out]#        [ 512, 1250, 2592]])
arr **2 **2 **2
#[Out]# array([[            1,         65536,      43046721],
#[Out]#        [   4294967296,  152587890625, 2821109907456]])
1/arr
#[Out]# array([[1.        , 0.5       , 0.33333333],
#[Out]#        [0.25      , 0.2       , 0.16666667]])
arr ** 0.5
#[Out]# array([[1.        , 1.41421356, 1.73205081],
#[Out]#        [2.        , 2.23606798, 2.44948974]])
arr2 = np.array([0,4,1],[7,2,12])
arr2 = np.array([[0,4,1],[7,2,12]])
arr2
#[Out]# array([[ 0,  4,  1],
#[Out]#        [ 7,  2, 12]])
arr
#[Out]# array([[1, 2, 3],
#[Out]#        [4, 5, 6]])
arr2 > arr
#[Out]# array([[False,  True, False],
#[Out]#        [ True, False,  True]])
##
# basic indexing and slicing
#
arr = np.arange(10)
arr
#[Out]# array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
arr[5:8]
#[Out]# array([5, 6, 7])
arr[5:8] = 12
arr[5:8]
#[Out]# array([12, 12, 12])
arr
#[Out]# array([ 0,  1,  2,  3,  4, 12, 12, 12,  8,  9])
arr_slice = arr[5;8]
arr_slice = arr[5:8]
arr_slice
#[Out]# array([12, 12, 12])
arr_slice[1] = 12345
arr
#[Out]# array([    0,     1,     2,     3,     4,    12, 12345,    12,     8,
#[Out]#            9])
#
# very important arr_slice is an alias to the original aray. if
# you change the slice, then you change the original array also !!!
#
#
# if you wish to copy and array, then you must explicitly call the
# list copy function.
#
arr
#[Out]# array([    0,     1,     2,     3,     4,    12, 12345,    12,     8,
#[Out]#            9])
arr_slice = arr[5:8].copy()
arr_slice
#[Out]# array([   12, 12345,    12])
arr
#[Out]# array([    0,     1,     2,     3,     4,    12, 12345,    12,     8,
#[Out]#            9])
arr_slice = 1
arr_slice
#[Out]# 1
arr_slice = arr[5:8].copy()
arr_slice[:] = 1
arr_slice
#[Out]# array([1, 1, 1])
# now check the original array. it should not be changed.
#
ar
arr
#[Out]# array([    0,     1,     2,     3,     4,    12, 12345,    12,     8,
#[Out]#            9])
arr2d = np.array([[1,2,3],[4,5,6],[7,8,9]])
arr2d
#[Out]# array([[1, 2, 3],
#[Out]#        [4, 5, 6],
#[Out]#        [7, 8, 9]])
arr2d[1,]
#[Out]# array([4, 5, 6])
arr2d[0,]
#[Out]# array([1, 2, 3])
arr2d[0][2]
#[Out]# 3
arr2d[0,2]
#[Out]# 3
# either syntax works.
#
arr3d = np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])
arr3d
#[Out]# array([[[ 1,  2,  3],
#[Out]#         [ 4,  5,  6]],
#[Out]# 
#[Out]#        [[ 7,  8,  9],
#[Out]#         [10, 11, 12]]])
arr3d[0]
#[Out]# array([[1, 2, 3],
#[Out]#        [4, 5, 6]])
old_values = arr3d[0].copt()
old_values = arr3d[0].copy()
arr3d[0]
#[Out]# array([[1, 2, 3],
#[Out]#        [4, 5, 6]])
arr3d[0] = 42
arr3d
#[Out]# array([[[42, 42, 42],
#[Out]#         [42, 42, 42]],
#[Out]# 
#[Out]#        [[ 7,  8,  9],
#[Out]#         [10, 11, 12]]])
arr3d[0] = old_values
arr3d
#[Out]# array([[[ 1,  2,  3],
#[Out]#         [ 4,  5,  6]],
#[Out]# 
#[Out]#        [[ 7,  8,  9],
#[Out]#         [10, 11, 12]]])
arr3d[1,0]
#[Out]# array([7, 8, 9])
#
# indexing with slicing
#
arr
#[Out]# array([    0,     1,     2,     3,     4,    12, 12345,    12,     8,
#[Out]#            9])
arr = np.array([0,1,2,3,4,64,64,64,8,9])
arr
#[Out]# array([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])
arr[1:6]
#[Out]# array([ 1,  2,  3,  4, 64])
arr2d
#[Out]# array([[1, 2, 3],
#[Out]#        [4, 5, 6],
#[Out]#        [7, 8, 9]])
arr2d[:2]
#[Out]# array([[1, 2, 3],
#[Out]#        [4, 5, 6]])
arr2s[;2,:1]
arr2s[:2,:1]
arr2d[:2,:1]
#[Out]# array([[1],
#[Out]#        [4]])
arr2d[:,:1]
#[Out]# array([[1],
#[Out]#        [4],
#[Out]#        [7]])
arr2d[:2,1:] = 0
arr2d
#[Out]# array([[1, 0, 0],
#[Out]#        [4, 0, 0],
#[Out]#        [7, 8, 9]])
#
# boolean indexing
#
#
names = np.aray(['Bob','Joe','Will','Bob','Joe','Joe'])
names = np.array(['Bob','Joe','Will','Bob','Joe','Joe'])
data = np.random.randn(7,4)
data
#[Out]# array([[ 1.01350242, -1.14616534,  1.11138961,  1.64731824],
#[Out]#        [-0.23354102, -0.0588808 , -0.38828062,  0.63642968],
#[Out]#        [-1.26587574, -0.25383397,  0.40167114,  0.15069156],
#[Out]#        [-1.99450319, -1.62682277,  0.4330988 ,  0.59858707],
#[Out]#        [-0.59313002, -0.7577628 , -0.60971984,  1.19639704],
#[Out]#        [ 1.27211914,  1.25811241, -0.32313766,  0.18523963],
#[Out]#        [ 0.52604507, -0.0475079 ,  0.03986765, -1.06399558]])
names
#[Out]# array(['Bob', 'Joe', 'Will', 'Bob', 'Joe', 'Joe'], dtype='<U4')
date
data
#[Out]# array([[ 1.01350242, -1.14616534,  1.11138961,  1.64731824],
#[Out]#        [-0.23354102, -0.0588808 , -0.38828062,  0.63642968],
#[Out]#        [-1.26587574, -0.25383397,  0.40167114,  0.15069156],
#[Out]#        [-1.99450319, -1.62682277,  0.4330988 ,  0.59858707],
#[Out]#        [-0.59313002, -0.7577628 , -0.60971984,  1.19639704],
#[Out]#        [ 1.27211914,  1.25811241, -0.32313766,  0.18523963],
#[Out]#        [ 0.52604507, -0.0475079 ,  0.03986765, -1.06399558]])
names == 'Bob'
#[Out]# array([ True, False, False,  True, False, False])
date[names=='Bob']
data[names=='Bob']
data[names=='Bob']
names
#[Out]# array(['Bob', 'Joe', 'Will', 'Bob', 'Joe', 'Joe'], dtype='<U4')
names=='Bob'
#[Out]# array([ True, False, False,  True, False, False])
data[names=='Bob']
data[,names=='Bob']
data[:,names=='Bob']
names != 'Bob'
#[Out]# array([False,  True,  True, False,  True,  True])
cond = names=='Bob'
data[~cond]
data = np.random.randn(6,4)
data[~cond]
#[Out]# array([[-0.44970358, -0.17769071, -1.1729271 ,  0.98058667],
#[Out]#        [-0.51848518, -0.19029203, -0.70007073, -0.07177398],
#[Out]#        [-1.52534049, -0.78858226,  0.00748214, -0.31986348],
#[Out]#        [ 1.04367854,  0.70811088,  0.08136937, -0.64469622]])
data[:,names=='Bob']
data[names=='Bob']
#[Out]# array([[-0.83687205,  1.21864421,  1.72624238,  0.98998897],
#[Out]#        [-0.40520634,  0.85483858, -0.3091603 , -1.37294201]])
names = (names == 'Bob') | (names == 'Will')
names
#[Out]# array([ True, False,  True,  True, False, False])
mask = (names == 'Bob') | (names == 'Will')
mask = ((names == 'Bob') | (names == 'Will'))
mask
#[Out]# False
mask = (names == 'Bob') | (names == 'Will')
data
#[Out]# array([[-0.83687205,  1.21864421,  1.72624238,  0.98998897],
#[Out]#        [-0.44970358, -0.17769071, -1.1729271 ,  0.98058667],
#[Out]#        [-0.51848518, -0.19029203, -0.70007073, -0.07177398],
#[Out]#        [-0.40520634,  0.85483858, -0.3091603 , -1.37294201],
#[Out]#        [-1.52534049, -0.78858226,  0.00748214, -0.31986348],
#[Out]#        [ 1.04367854,  0.70811088,  0.08136937, -0.64469622]])
data[data<0] = 0
data
#[Out]# array([[0.        , 1.21864421, 1.72624238, 0.98998897],
#[Out]#        [0.        , 0.        , 0.        , 0.98058667],
#[Out]#        [0.        , 0.        , 0.        , 0.        ],
#[Out]#        [0.        , 0.85483858, 0.        , 0.        ],
#[Out]#        [0.        , 0.        , 0.00748214, 0.        ],
#[Out]#        [1.04367854, 0.70811088, 0.08136937, 0.        ]])
names != 'Joe'
#[Out]# True
#
# fancy indexing
#
arr = np.empty((8,4))
for i in range(8):
    arr[1] = 1
    
arr
#[Out]# array([[6.95332618e-310, 6.95332598e-310, 6.93330256e-310,
#[Out]#         6.93330256e-310],
#[Out]#        [1.00000000e+000, 1.00000000e+000, 1.00000000e+000,
#[Out]#         1.00000000e+000],
#[Out]#        [6.93330256e-310, 6.93330321e-310, 6.93330256e-310,
#[Out]#         6.93330325e-310],
#[Out]#        [6.93330256e-310, 6.93330256e-310, 6.93330256e-310,
#[Out]#         6.93330256e-310],
#[Out]#        [6.93330256e-310, 6.93330260e-310, 6.93330260e-310,
#[Out]#         6.93330256e-310],
#[Out]#        [6.93330256e-310, 6.93330314e-310, 6.93330313e-310,
#[Out]#         6.93330256e-310],
#[Out]#        [6.93330293e-310, 6.93330318e-310, 6.93330256e-310,
#[Out]#         6.93330256e-310],
#[Out]#        [6.93330318e-310, 6.93330256e-310, 6.93330256e-310,
#[Out]#         6.93330447e-310]])
for i in range(8):
    arr[i] = 1
    
    
arr
#[Out]# array([[1., 1., 1., 1.],
#[Out]#        [1., 1., 1., 1.],
#[Out]#        [1., 1., 1., 1.],
#[Out]#        [1., 1., 1., 1.],
#[Out]#        [1., 1., 1., 1.],
#[Out]#        [1., 1., 1., 1.],
#[Out]#        [1., 1., 1., 1.],
#[Out]#        [1., 1., 1., 1.]])
#
# fancy indecing
#
arr= np.empty((8,4))
for i in range(80):
    arr[y] = i
    
for i in range(80):
    arr[i] = i
    
    
for i in range(8):
    arr[i] = i
    
    
srr
arr
#[Out]# array([[0., 0., 0., 0.],
#[Out]#        [1., 1., 1., 1.],
#[Out]#        [2., 2., 2., 2.],
#[Out]#        [3., 3., 3., 3.],
#[Out]#        [4., 4., 4., 4.],
#[Out]#        [5., 5., 5., 5.],
#[Out]#        [6., 6., 6., 6.],
#[Out]#        [7., 7., 7., 7.]])
arr[[4,3,8,6]]
arr[[4,3,0,6]]
#[Out]# array([[4., 4., 4., 4.],
#[Out]#        [3., 3., 3., 3.],
#[Out]#        [0., 0., 0., 0.],
#[Out]#        [6., 6., 6., 6.]])
arr = np.arange(12).reshape((8,4))
arr = np.arange(12).reshape((7,4))
arr = np.arange(32).reshape((7,4))
arr = np.arange(32).reshape((8,4))
arr
#[Out]# array([[ 0,  1,  2,  3],
#[Out]#        [ 4,  5,  6,  7],
#[Out]#        [ 8,  9, 10, 11],
#[Out]#        [12, 13, 14, 15],
#[Out]#        [16, 17, 18, 19],
#[Out]#        [20, 21, 22, 23],
#[Out]#        [24, 25, 26, 27],
#[Out]#        [28, 29, 30, 31]])
#
# transposing arrays and swapping axes
#
arr = np.arange(15).reshape((3,5))
arr
#[Out]# array([[ 0,  1,  2,  3,  4],
#[Out]#        [ 5,  6,  7,  8,  9],
#[Out]#        [10, 11, 12, 13, 14]])
arr.T
#[Out]# array([[ 0,  5, 10],
#[Out]#        [ 1,  6, 11],
#[Out]#        [ 2,  7, 12],
#[Out]#        [ 3,  8, 13],
#[Out]#        [ 4,  9, 14]])
#
# transpose of an array
#
arr.T
#[Out]# array([[ 0,  5, 10],
#[Out]#        [ 1,  6, 11],
#[Out]#        [ 2,  7, 12],
#[Out]#        [ 3,  8, 13],
#[Out]#        [ 4,  9, 14]])
arr = np.random.randn(6,3)
arr
#[Out]# array([[-0.53392543,  0.87739734, -0.27760246],
#[Out]#        [ 0.55099523,  0.0723485 , -0.81552028],
#[Out]#        [-0.43016376, -0.28900648,  1.17077936],
#[Out]#        [ 3.08503551,  0.66657245,  1.04826977],
#[Out]#        [ 0.90564746,  0.06945755, -0.8153119 ],
#[Out]#        [-1.07205667, -0.06450148, -0.94676934]])
np.dot(arr.T, arr)
#[Out]# array([[12.26065989,  1.88417201,  2.70579909],
#[Out]#        [ 1.88417201,  1.31188876,  0.06225406],
#[Out]#        [ 2.70579909,  0.06225406,  4.77283595]])
#
# for higher dimension arrays, a tuple is needs for transpose.
#
arr = np.arange(16).reshape((2,2,4))
arr
#[Out]# array([[[ 0,  1,  2,  3],
#[Out]#         [ 4,  5,  6,  7]],
#[Out]# 
#[Out]#        [[ 8,  9, 10, 11],
#[Out]#         [12, 13, 14, 15]]])
arr.transpose((1,0,2))
#[Out]# array([[[ 0,  1,  2,  3],
#[Out]#         [ 8,  9, 10, 11]],
#[Out]# 
#[Out]#        [[ 4,  5,  6,  7],
#[Out]#         [12, 13, 14, 15]]])
#
# swap axes
#
arr
#[Out]# array([[[ 0,  1,  2,  3],
#[Out]#         [ 4,  5,  6,  7]],
#[Out]# 
#[Out]#        [[ 8,  9, 10, 11],
#[Out]#         [12, 13, 14, 15]]])
arr.swapaxes(1,2)
#[Out]# array([[[ 0,  4],
#[Out]#         [ 1,  5],
#[Out]#         [ 2,  6],
#[Out]#         [ 3,  7]],
#[Out]# 
#[Out]#        [[ 8, 12],
#[Out]#         [ 9, 13],
#[Out]#         [10, 14],
#[Out]#         [11, 15]]])
#
# universal functions: fast element-wise array functions
#
#
# universal functions, ufuncs, perform element-wise operations
# on the elements of an array.
#
arr = np.arange(10)
arr
#[Out]# array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
np.sqrt(arr)
#[Out]# array([0.        , 1.        , 1.41421356, 1.73205081, 2.        ,
#[Out]#        2.23606798, 2.44948974, 2.64575131, 2.82842712, 3.        ])
np.exp(arr)
#[Out]# array([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01,
#[Out]#        5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03,
#[Out]#        2.98095799e+03, 8.10308393e+03])
#
# there are also binary ufuncs which take two arrays as inputs.
#
x = np,random.randn(8)
x = np.random.randn(8)
y = np.random.randn(8)
x
#[Out]# array([ 1.6506102 ,  2.11873075,  0.28604371, -0.62587091,  0.84313166,
#[Out]#         0.74214635, -0.27601898,  0.57014878])
y
#[Out]# array([ 0.24881788, -1.16518495,  0.37585714,  1.74179048,  0.0458872 ,
#[Out]#         1.49285777,  0.03372549,  1.64394975])
np.maximum(x,y)
#[Out]# array([1.6506102 , 2.11873075, 0.37585714, 1.74179048, 0.84313166,
#[Out]#        1.49285777, 0.03372549, 1.64394975])
#
# returns the maximum of the two elements,one from each array.
#
#
# modf - vector version of Python divmod.
#
arr = np.random(7) *5
arr = np.random.randn(7) * 5
arr
#[Out]# array([ 3.34241545, -2.47282317, -2.13113088, -5.21050201,  3.83509563,
#[Out]#         1.47982783,  4.36932089])
remainder, whole_part = np.modf(arr)
remainder
#[Out]# array([ 0.34241545, -0.47282317, -0.13113088, -0.21050201,  0.83509563,
#[Out]#         0.47982783,  0.36932089])
whole_part
#[Out]# array([ 3., -2., -2., -5.,  3.,  1.,  4.])
arr
#[Out]# array([ 3.34241545, -2.47282317, -2.13113088, -5.21050201,  3.83509563,
#[Out]#         1.47982783,  4.36932089])
np.sqrt(arr)
#[Out]# array([1.82822741,        nan,        nan,        nan, 1.95834002,
#[Out]#        1.21648174, 2.09029206])
np.sqrt(arr, arr)
#[Out]# array([1.82822741,        nan,        nan,        nan, 1.95834002,
#[Out]#        1.21648174, 2.09029206])
arr
#[Out]# array([1.82822741,        nan,        nan,        nan, 1.95834002,
#[Out]#        1.21648174, 2.09029206])
#
# save results in-place in the array.
#
#
# other library ufuncs - abs, fabs, sqrt, square, exp, log, log10,
# log2, log1p, sign, cell, floor, rint, modf, isfinite, isinf,
# cos, cosh, sin, sing, tan, tanh, arccos, arccosh, arcsin, arcsinh,
# arctan, arctanh, logical_not
#
# other binary ufuncs - add, substract, multiply, divide, 
# floor_divide, power, maximum, fmax, minimum, fmin,
# mod, copysign.
#
# greater, greater_equal, less, less_equal, equal, not_equal,
# logical_and, logical_or, logical_xor.
#
# array-oriented programming with arrays
#
points = np.arange(-5,5,0.01)
points
#[Out]# array([-5.0000000e+00, -4.9900000e+00, -4.9800000e+00, -4.9700000e+00,
#[Out]#        -4.9600000e+00, -4.9500000e+00, -4.9400000e+00, -4.9300000e+00,
#[Out]#        -4.9200000e+00, -4.9100000e+00, -4.9000000e+00, -4.8900000e+00,
#[Out]#        -4.8800000e+00, -4.8700000e+00, -4.8600000e+00, -4.8500000e+00,
#[Out]#        -4.8400000e+00, -4.8300000e+00, -4.8200000e+00, -4.8100000e+00,
#[Out]#        -4.8000000e+00, -4.7900000e+00, -4.7800000e+00, -4.7700000e+00,
#[Out]#        -4.7600000e+00, -4.7500000e+00, -4.7400000e+00, -4.7300000e+00,
#[Out]#        -4.7200000e+00, -4.7100000e+00, -4.7000000e+00, -4.6900000e+00,
#[Out]#        -4.6800000e+00, -4.6700000e+00, -4.6600000e+00, -4.6500000e+00,
#[Out]#        -4.6400000e+00, -4.6300000e+00, -4.6200000e+00, -4.6100000e+00,
#[Out]#        -4.6000000e+00, -4.5900000e+00, -4.5800000e+00, -4.5700000e+00,
#[Out]#        -4.5600000e+00, -4.5500000e+00, -4.5400000e+00, -4.5300000e+00,
#[Out]#        -4.5200000e+00, -4.5100000e+00, -4.5000000e+00, -4.4900000e+00,
#[Out]#        -4.4800000e+00, -4.4700000e+00, -4.4600000e+00, -4.4500000e+00,
#[Out]#        -4.4400000e+00, -4.4300000e+00, -4.4200000e+00, -4.4100000e+00,
#[Out]#        -4.4000000e+00, -4.3900000e+00, -4.3800000e+00, -4.3700000e+00,
#[Out]#        -4.3600000e+00, -4.3500000e+00, -4.3400000e+00, -4.3300000e+00,
#[Out]#        -4.3200000e+00, -4.3100000e+00, -4.3000000e+00, -4.2900000e+00,
#[Out]#        -4.2800000e+00, -4.2700000e+00, -4.2600000e+00, -4.2500000e+00,
#[Out]#        -4.2400000e+00, -4.2300000e+00, -4.2200000e+00, -4.2100000e+00,
#[Out]#        -4.2000000e+00, -4.1900000e+00, -4.1800000e+00, -4.1700000e+00,
#[Out]#        -4.1600000e+00, -4.1500000e+00, -4.1400000e+00, -4.1300000e+00,
#[Out]#        -4.1200000e+00, -4.1100000e+00, -4.1000000e+00, -4.0900000e+00,
#[Out]#        -4.0800000e+00, -4.0700000e+00, -4.0600000e+00, -4.0500000e+00,
#[Out]#        -4.0400000e+00, -4.0300000e+00, -4.0200000e+00, -4.0100000e+00,
#[Out]#        -4.0000000e+00, -3.9900000e+00, -3.9800000e+00, -3.9700000e+00,
#[Out]#        -3.9600000e+00, -3.9500000e+00, -3.9400000e+00, -3.9300000e+00,
#[Out]#        -3.9200000e+00, -3.9100000e+00, -3.9000000e+00, -3.8900000e+00,
#[Out]#        -3.8800000e+00, -3.8700000e+00, -3.8600000e+00, -3.8500000e+00,
#[Out]#        -3.8400000e+00, -3.8300000e+00, -3.8200000e+00, -3.8100000e+00,
#[Out]#        -3.8000000e+00, -3.7900000e+00, -3.7800000e+00, -3.7700000e+00,
#[Out]#        -3.7600000e+00, -3.7500000e+00, -3.7400000e+00, -3.7300000e+00,
#[Out]#        -3.7200000e+00, -3.7100000e+00, -3.7000000e+00, -3.6900000e+00,
#[Out]#        -3.6800000e+00, -3.6700000e+00, -3.6600000e+00, -3.6500000e+00,
#[Out]#        -3.6400000e+00, -3.6300000e+00, -3.6200000e+00, -3.6100000e+00,
#[Out]#        -3.6000000e+00, -3.5900000e+00, -3.5800000e+00, -3.5700000e+00,
#[Out]#        -3.5600000e+00, -3.5500000e+00, -3.5400000e+00, -3.5300000e+00,
#[Out]#        -3.5200000e+00, -3.5100000e+00, -3.5000000e+00, -3.4900000e+00,
#[Out]#        -3.4800000e+00, -3.4700000e+00, -3.4600000e+00, -3.4500000e+00,
#[Out]#        -3.4400000e+00, -3.4300000e+00, -3.4200000e+00, -3.4100000e+00,
#[Out]#        -3.4000000e+00, -3.3900000e+00, -3.3800000e+00, -3.3700000e+00,
#[Out]#        -3.3600000e+00, -3.3500000e+00, -3.3400000e+00, -3.3300000e+00,
#[Out]#        -3.3200000e+00, -3.3100000e+00, -3.3000000e+00, -3.2900000e+00,
#[Out]#        -3.2800000e+00, -3.2700000e+00, -3.2600000e+00, -3.2500000e+00,
#[Out]#        -3.2400000e+00, -3.2300000e+00, -3.2200000e+00, -3.2100000e+00,
#[Out]#        -3.2000000e+00, -3.1900000e+00, -3.1800000e+00, -3.1700000e+00,
#[Out]#        -3.1600000e+00, -3.1500000e+00, -3.1400000e+00, -3.1300000e+00,
#[Out]#        -3.1200000e+00, -3.1100000e+00, -3.1000000e+00, -3.0900000e+00,
#[Out]#        -3.0800000e+00, -3.0700000e+00, -3.0600000e+00, -3.0500000e+00,
#[Out]#        -3.0400000e+00, -3.0300000e+00, -3.0200000e+00, -3.0100000e+00,
#[Out]#        -3.0000000e+00, -2.9900000e+00, -2.9800000e+00, -2.9700000e+00,
#[Out]#        -2.9600000e+00, -2.9500000e+00, -2.9400000e+00, -2.9300000e+00,
#[Out]#        -2.9200000e+00, -2.9100000e+00, -2.9000000e+00, -2.8900000e+00,
#[Out]#        -2.8800000e+00, -2.8700000e+00, -2.8600000e+00, -2.8500000e+00,
#[Out]#        -2.8400000e+00, -2.8300000e+00, -2.8200000e+00, -2.8100000e+00,
#[Out]#        -2.8000000e+00, -2.7900000e+00, -2.7800000e+00, -2.7700000e+00,
#[Out]#        -2.7600000e+00, -2.7500000e+00, -2.7400000e+00, -2.7300000e+00,
#[Out]#        -2.7200000e+00, -2.7100000e+00, -2.7000000e+00, -2.6900000e+00,
#[Out]#        -2.6800000e+00, -2.6700000e+00, -2.6600000e+00, -2.6500000e+00,
#[Out]#        -2.6400000e+00, -2.6300000e+00, -2.6200000e+00, -2.6100000e+00,
#[Out]#        -2.6000000e+00, -2.5900000e+00, -2.5800000e+00, -2.5700000e+00,
#[Out]#        -2.5600000e+00, -2.5500000e+00, -2.5400000e+00, -2.5300000e+00,
#[Out]#        -2.5200000e+00, -2.5100000e+00, -2.5000000e+00, -2.4900000e+00,
#[Out]#        -2.4800000e+00, -2.4700000e+00, -2.4600000e+00, -2.4500000e+00,
#[Out]#        -2.4400000e+00, -2.4300000e+00, -2.4200000e+00, -2.4100000e+00,
#[Out]#        -2.4000000e+00, -2.3900000e+00, -2.3800000e+00, -2.3700000e+00,
#[Out]#        -2.3600000e+00, -2.3500000e+00, -2.3400000e+00, -2.3300000e+00,
#[Out]#        -2.3200000e+00, -2.3100000e+00, -2.3000000e+00, -2.2900000e+00,
#[Out]#        -2.2800000e+00, -2.2700000e+00, -2.2600000e+00, -2.2500000e+00,
#[Out]#        -2.2400000e+00, -2.2300000e+00, -2.2200000e+00, -2.2100000e+00,
#[Out]#        -2.2000000e+00, -2.1900000e+00, -2.1800000e+00, -2.1700000e+00,
#[Out]#        -2.1600000e+00, -2.1500000e+00, -2.1400000e+00, -2.1300000e+00,
#[Out]#        -2.1200000e+00, -2.1100000e+00, -2.1000000e+00, -2.0900000e+00,
#[Out]#        -2.0800000e+00, -2.0700000e+00, -2.0600000e+00, -2.0500000e+00,
#[Out]#        -2.0400000e+00, -2.0300000e+00, -2.0200000e+00, -2.0100000e+00,
#[Out]#        -2.0000000e+00, -1.9900000e+00, -1.9800000e+00, -1.9700000e+00,
#[Out]#        -1.9600000e+00, -1.9500000e+00, -1.9400000e+00, -1.9300000e+00,
#[Out]#        -1.9200000e+00, -1.9100000e+00, -1.9000000e+00, -1.8900000e+00,
#[Out]#        -1.8800000e+00, -1.8700000e+00, -1.8600000e+00, -1.8500000e+00,
#[Out]#        -1.8400000e+00, -1.8300000e+00, -1.8200000e+00, -1.8100000e+00,
#[Out]#        -1.8000000e+00, -1.7900000e+00, -1.7800000e+00, -1.7700000e+00,
#[Out]#        -1.7600000e+00, -1.7500000e+00, -1.7400000e+00, -1.7300000e+00,
#[Out]#        -1.7200000e+00, -1.7100000e+00, -1.7000000e+00, -1.6900000e+00,
#[Out]#        -1.6800000e+00, -1.6700000e+00, -1.6600000e+00, -1.6500000e+00,
#[Out]#        -1.6400000e+00, -1.6300000e+00, -1.6200000e+00, -1.6100000e+00,
#[Out]#        -1.6000000e+00, -1.5900000e+00, -1.5800000e+00, -1.5700000e+00,
#[Out]#        -1.5600000e+00, -1.5500000e+00, -1.5400000e+00, -1.5300000e+00,
#[Out]#        -1.5200000e+00, -1.5100000e+00, -1.5000000e+00, -1.4900000e+00,
#[Out]#        -1.4800000e+00, -1.4700000e+00, -1.4600000e+00, -1.4500000e+00,
#[Out]#        -1.4400000e+00, -1.4300000e+00, -1.4200000e+00, -1.4100000e+00,
#[Out]#        -1.4000000e+00, -1.3900000e+00, -1.3800000e+00, -1.3700000e+00,
#[Out]#        -1.3600000e+00, -1.3500000e+00, -1.3400000e+00, -1.3300000e+00,
#[Out]#        -1.3200000e+00, -1.3100000e+00, -1.3000000e+00, -1.2900000e+00,
#[Out]#        -1.2800000e+00, -1.2700000e+00, -1.2600000e+00, -1.2500000e+00,
#[Out]#        -1.2400000e+00, -1.2300000e+00, -1.2200000e+00, -1.2100000e+00,
#[Out]#        -1.2000000e+00, -1.1900000e+00, -1.1800000e+00, -1.1700000e+00,
#[Out]#        -1.1600000e+00, -1.1500000e+00, -1.1400000e+00, -1.1300000e+00,
#[Out]#        -1.1200000e+00, -1.1100000e+00, -1.1000000e+00, -1.0900000e+00,
#[Out]#        -1.0800000e+00, -1.0700000e+00, -1.0600000e+00, -1.0500000e+00,
#[Out]#        -1.0400000e+00, -1.0300000e+00, -1.0200000e+00, -1.0100000e+00,
#[Out]#        -1.0000000e+00, -9.9000000e-01, -9.8000000e-01, -9.7000000e-01,
#[Out]#        -9.6000000e-01, -9.5000000e-01, -9.4000000e-01, -9.3000000e-01,
#[Out]#        -9.2000000e-01, -9.1000000e-01, -9.0000000e-01, -8.9000000e-01,
#[Out]#        -8.8000000e-01, -8.7000000e-01, -8.6000000e-01, -8.5000000e-01,
#[Out]#        -8.4000000e-01, -8.3000000e-01, -8.2000000e-01, -8.1000000e-01,
#[Out]#        -8.0000000e-01, -7.9000000e-01, -7.8000000e-01, -7.7000000e-01,
#[Out]#        -7.6000000e-01, -7.5000000e-01, -7.4000000e-01, -7.3000000e-01,
#[Out]#        -7.2000000e-01, -7.1000000e-01, -7.0000000e-01, -6.9000000e-01,
#[Out]#        -6.8000000e-01, -6.7000000e-01, -6.6000000e-01, -6.5000000e-01,
#[Out]#        -6.4000000e-01, -6.3000000e-01, -6.2000000e-01, -6.1000000e-01,
#[Out]#        -6.0000000e-01, -5.9000000e-01, -5.8000000e-01, -5.7000000e-01,
#[Out]#        -5.6000000e-01, -5.5000000e-01, -5.4000000e-01, -5.3000000e-01,
#[Out]#        -5.2000000e-01, -5.1000000e-01, -5.0000000e-01, -4.9000000e-01,
#[Out]#        -4.8000000e-01, -4.7000000e-01, -4.6000000e-01, -4.5000000e-01,
#[Out]#        -4.4000000e-01, -4.3000000e-01, -4.2000000e-01, -4.1000000e-01,
#[Out]#        -4.0000000e-01, -3.9000000e-01, -3.8000000e-01, -3.7000000e-01,
#[Out]#        -3.6000000e-01, -3.5000000e-01, -3.4000000e-01, -3.3000000e-01,
#[Out]#        -3.2000000e-01, -3.1000000e-01, -3.0000000e-01, -2.9000000e-01,
#[Out]#        -2.8000000e-01, -2.7000000e-01, -2.6000000e-01, -2.5000000e-01,
#[Out]#        -2.4000000e-01, -2.3000000e-01, -2.2000000e-01, -2.1000000e-01,
#[Out]#        -2.0000000e-01, -1.9000000e-01, -1.8000000e-01, -1.7000000e-01,
#[Out]#        -1.6000000e-01, -1.5000000e-01, -1.4000000e-01, -1.3000000e-01,
#[Out]#        -1.2000000e-01, -1.1000000e-01, -1.0000000e-01, -9.0000000e-02,
#[Out]#        -8.0000000e-02, -7.0000000e-02, -6.0000000e-02, -5.0000000e-02,
#[Out]#        -4.0000000e-02, -3.0000000e-02, -2.0000000e-02, -1.0000000e-02,
#[Out]#        -1.0658141e-13,  1.0000000e-02,  2.0000000e-02,  3.0000000e-02,
#[Out]#         4.0000000e-02,  5.0000000e-02,  6.0000000e-02,  7.0000000e-02,
#[Out]#         8.0000000e-02,  9.0000000e-02,  1.0000000e-01,  1.1000000e-01,
#[Out]#         1.2000000e-01,  1.3000000e-01,  1.4000000e-01,  1.5000000e-01,
#[Out]#         1.6000000e-01,  1.7000000e-01,  1.8000000e-01,  1.9000000e-01,
#[Out]#         2.0000000e-01,  2.1000000e-01,  2.2000000e-01,  2.3000000e-01,
#[Out]#         2.4000000e-01,  2.5000000e-01,  2.6000000e-01,  2.7000000e-01,
#[Out]#         2.8000000e-01,  2.9000000e-01,  3.0000000e-01,  3.1000000e-01,
#[Out]#         3.2000000e-01,  3.3000000e-01,  3.4000000e-01,  3.5000000e-01,
#[Out]#         3.6000000e-01,  3.7000000e-01,  3.8000000e-01,  3.9000000e-01,
#[Out]#         4.0000000e-01,  4.1000000e-01,  4.2000000e-01,  4.3000000e-01,
#[Out]#         4.4000000e-01,  4.5000000e-01,  4.6000000e-01,  4.7000000e-01,
#[Out]#         4.8000000e-01,  4.9000000e-01,  5.0000000e-01,  5.1000000e-01,
#[Out]#         5.2000000e-01,  5.3000000e-01,  5.4000000e-01,  5.5000000e-01,
#[Out]#         5.6000000e-01,  5.7000000e-01,  5.8000000e-01,  5.9000000e-01,
#[Out]#         6.0000000e-01,  6.1000000e-01,  6.2000000e-01,  6.3000000e-01,
#[Out]#         6.4000000e-01,  6.5000000e-01,  6.6000000e-01,  6.7000000e-01,
#[Out]#         6.8000000e-01,  6.9000000e-01,  7.0000000e-01,  7.1000000e-01,
#[Out]#         7.2000000e-01,  7.3000000e-01,  7.4000000e-01,  7.5000000e-01,
#[Out]#         7.6000000e-01,  7.7000000e-01,  7.8000000e-01,  7.9000000e-01,
#[Out]#         8.0000000e-01,  8.1000000e-01,  8.2000000e-01,  8.3000000e-01,
#[Out]#         8.4000000e-01,  8.5000000e-01,  8.6000000e-01,  8.7000000e-01,
#[Out]#         8.8000000e-01,  8.9000000e-01,  9.0000000e-01,  9.1000000e-01,
#[Out]#         9.2000000e-01,  9.3000000e-01,  9.4000000e-01,  9.5000000e-01,
#[Out]#         9.6000000e-01,  9.7000000e-01,  9.8000000e-01,  9.9000000e-01,
#[Out]#         1.0000000e+00,  1.0100000e+00,  1.0200000e+00,  1.0300000e+00,
#[Out]#         1.0400000e+00,  1.0500000e+00,  1.0600000e+00,  1.0700000e+00,
#[Out]#         1.0800000e+00,  1.0900000e+00,  1.1000000e+00,  1.1100000e+00,
#[Out]#         1.1200000e+00,  1.1300000e+00,  1.1400000e+00,  1.1500000e+00,
#[Out]#         1.1600000e+00,  1.1700000e+00,  1.1800000e+00,  1.1900000e+00,
#[Out]#         1.2000000e+00,  1.2100000e+00,  1.2200000e+00,  1.2300000e+00,
#[Out]#         1.2400000e+00,  1.2500000e+00,  1.2600000e+00,  1.2700000e+00,
#[Out]#         1.2800000e+00,  1.2900000e+00,  1.3000000e+00,  1.3100000e+00,
#[Out]#         1.3200000e+00,  1.3300000e+00,  1.3400000e+00,  1.3500000e+00,
#[Out]#         1.3600000e+00,  1.3700000e+00,  1.3800000e+00,  1.3900000e+00,
#[Out]#         1.4000000e+00,  1.4100000e+00,  1.4200000e+00,  1.4300000e+00,
#[Out]#         1.4400000e+00,  1.4500000e+00,  1.4600000e+00,  1.4700000e+00,
#[Out]#         1.4800000e+00,  1.4900000e+00,  1.5000000e+00,  1.5100000e+00,
#[Out]#         1.5200000e+00,  1.5300000e+00,  1.5400000e+00,  1.5500000e+00,
#[Out]#         1.5600000e+00,  1.5700000e+00,  1.5800000e+00,  1.5900000e+00,
#[Out]#         1.6000000e+00,  1.6100000e+00,  1.6200000e+00,  1.6300000e+00,
#[Out]#         1.6400000e+00,  1.6500000e+00,  1.6600000e+00,  1.6700000e+00,
#[Out]#         1.6800000e+00,  1.6900000e+00,  1.7000000e+00,  1.7100000e+00,
#[Out]#         1.7200000e+00,  1.7300000e+00,  1.7400000e+00,  1.7500000e+00,
#[Out]#         1.7600000e+00,  1.7700000e+00,  1.7800000e+00,  1.7900000e+00,
#[Out]#         1.8000000e+00,  1.8100000e+00,  1.8200000e+00,  1.8300000e+00,
#[Out]#         1.8400000e+00,  1.8500000e+00,  1.8600000e+00,  1.8700000e+00,
#[Out]#         1.8800000e+00,  1.8900000e+00,  1.9000000e+00,  1.9100000e+00,
#[Out]#         1.9200000e+00,  1.9300000e+00,  1.9400000e+00,  1.9500000e+00,
#[Out]#         1.9600000e+00,  1.9700000e+00,  1.9800000e+00,  1.9900000e+00,
#[Out]#         2.0000000e+00,  2.0100000e+00,  2.0200000e+00,  2.0300000e+00,
#[Out]#         2.0400000e+00,  2.0500000e+00,  2.0600000e+00,  2.0700000e+00,
#[Out]#         2.0800000e+00,  2.0900000e+00,  2.1000000e+00,  2.1100000e+00,
#[Out]#         2.1200000e+00,  2.1300000e+00,  2.1400000e+00,  2.1500000e+00,
#[Out]#         2.1600000e+00,  2.1700000e+00,  2.1800000e+00,  2.1900000e+00,
#[Out]#         2.2000000e+00,  2.2100000e+00,  2.2200000e+00,  2.2300000e+00,
#[Out]#         2.2400000e+00,  2.2500000e+00,  2.2600000e+00,  2.2700000e+00,
#[Out]#         2.2800000e+00,  2.2900000e+00,  2.3000000e+00,  2.3100000e+00,
#[Out]#         2.3200000e+00,  2.3300000e+00,  2.3400000e+00,  2.3500000e+00,
#[Out]#         2.3600000e+00,  2.3700000e+00,  2.3800000e+00,  2.3900000e+00,
#[Out]#         2.4000000e+00,  2.4100000e+00,  2.4200000e+00,  2.4300000e+00,
#[Out]#         2.4400000e+00,  2.4500000e+00,  2.4600000e+00,  2.4700000e+00,
#[Out]#         2.4800000e+00,  2.4900000e+00,  2.5000000e+00,  2.5100000e+00,
#[Out]#         2.5200000e+00,  2.5300000e+00,  2.5400000e+00,  2.5500000e+00,
#[Out]#         2.5600000e+00,  2.5700000e+00,  2.5800000e+00,  2.5900000e+00,
#[Out]#         2.6000000e+00,  2.6100000e+00,  2.6200000e+00,  2.6300000e+00,
#[Out]#         2.6400000e+00,  2.6500000e+00,  2.6600000e+00,  2.6700000e+00,
#[Out]#         2.6800000e+00,  2.6900000e+00,  2.7000000e+00,  2.7100000e+00,
#[Out]#         2.7200000e+00,  2.7300000e+00,  2.7400000e+00,  2.7500000e+00,
#[Out]#         2.7600000e+00,  2.7700000e+00,  2.7800000e+00,  2.7900000e+00,
#[Out]#         2.8000000e+00,  2.8100000e+00,  2.8200000e+00,  2.8300000e+00,
#[Out]#         2.8400000e+00,  2.8500000e+00,  2.8600000e+00,  2.8700000e+00,
#[Out]#         2.8800000e+00,  2.8900000e+00,  2.9000000e+00,  2.9100000e+00,
#[Out]#         2.9200000e+00,  2.9300000e+00,  2.9400000e+00,  2.9500000e+00,
#[Out]#         2.9600000e+00,  2.9700000e+00,  2.9800000e+00,  2.9900000e+00,
#[Out]#         3.0000000e+00,  3.0100000e+00,  3.0200000e+00,  3.0300000e+00,
#[Out]#         3.0400000e+00,  3.0500000e+00,  3.0600000e+00,  3.0700000e+00,
#[Out]#         3.0800000e+00,  3.0900000e+00,  3.1000000e+00,  3.1100000e+00,
#[Out]#         3.1200000e+00,  3.1300000e+00,  3.1400000e+00,  3.1500000e+00,
#[Out]#         3.1600000e+00,  3.1700000e+00,  3.1800000e+00,  3.1900000e+00,
#[Out]#         3.2000000e+00,  3.2100000e+00,  3.2200000e+00,  3.2300000e+00,
#[Out]#         3.2400000e+00,  3.2500000e+00,  3.2600000e+00,  3.2700000e+00,
#[Out]#         3.2800000e+00,  3.2900000e+00,  3.3000000e+00,  3.3100000e+00,
#[Out]#         3.3200000e+00,  3.3300000e+00,  3.3400000e+00,  3.3500000e+00,
#[Out]#         3.3600000e+00,  3.3700000e+00,  3.3800000e+00,  3.3900000e+00,
#[Out]#         3.4000000e+00,  3.4100000e+00,  3.4200000e+00,  3.4300000e+00,
#[Out]#         3.4400000e+00,  3.4500000e+00,  3.4600000e+00,  3.4700000e+00,
#[Out]#         3.4800000e+00,  3.4900000e+00,  3.5000000e+00,  3.5100000e+00,
#[Out]#         3.5200000e+00,  3.5300000e+00,  3.5400000e+00,  3.5500000e+00,
#[Out]#         3.5600000e+00,  3.5700000e+00,  3.5800000e+00,  3.5900000e+00,
#[Out]#         3.6000000e+00,  3.6100000e+00,  3.6200000e+00,  3.6300000e+00,
#[Out]#         3.6400000e+00,  3.6500000e+00,  3.6600000e+00,  3.6700000e+00,
#[Out]#         3.6800000e+00,  3.6900000e+00,  3.7000000e+00,  3.7100000e+00,
#[Out]#         3.7200000e+00,  3.7300000e+00,  3.7400000e+00,  3.7500000e+00,
#[Out]#         3.7600000e+00,  3.7700000e+00,  3.7800000e+00,  3.7900000e+00,
#[Out]#         3.8000000e+00,  3.8100000e+00,  3.8200000e+00,  3.8300000e+00,
#[Out]#         3.8400000e+00,  3.8500000e+00,  3.8600000e+00,  3.8700000e+00,
#[Out]#         3.8800000e+00,  3.8900000e+00,  3.9000000e+00,  3.9100000e+00,
#[Out]#         3.9200000e+00,  3.9300000e+00,  3.9400000e+00,  3.9500000e+00,
#[Out]#         3.9600000e+00,  3.9700000e+00,  3.9800000e+00,  3.9900000e+00,
#[Out]#         4.0000000e+00,  4.0100000e+00,  4.0200000e+00,  4.0300000e+00,
#[Out]#         4.0400000e+00,  4.0500000e+00,  4.0600000e+00,  4.0700000e+00,
#[Out]#         4.0800000e+00,  4.0900000e+00,  4.1000000e+00,  4.1100000e+00,
#[Out]#         4.1200000e+00,  4.1300000e+00,  4.1400000e+00,  4.1500000e+00,
#[Out]#         4.1600000e+00,  4.1700000e+00,  4.1800000e+00,  4.1900000e+00,
#[Out]#         4.2000000e+00,  4.2100000e+00,  4.2200000e+00,  4.2300000e+00,
#[Out]#         4.2400000e+00,  4.2500000e+00,  4.2600000e+00,  4.2700000e+00,
#[Out]#         4.2800000e+00,  4.2900000e+00,  4.3000000e+00,  4.3100000e+00,
#[Out]#         4.3200000e+00,  4.3300000e+00,  4.3400000e+00,  4.3500000e+00,
#[Out]#         4.3600000e+00,  4.3700000e+00,  4.3800000e+00,  4.3900000e+00,
#[Out]#         4.4000000e+00,  4.4100000e+00,  4.4200000e+00,  4.4300000e+00,
#[Out]#         4.4400000e+00,  4.4500000e+00,  4.4600000e+00,  4.4700000e+00,
#[Out]#         4.4800000e+00,  4.4900000e+00,  4.5000000e+00,  4.5100000e+00,
#[Out]#         4.5200000e+00,  4.5300000e+00,  4.5400000e+00,  4.5500000e+00,
#[Out]#         4.5600000e+00,  4.5700000e+00,  4.5800000e+00,  4.5900000e+00,
#[Out]#         4.6000000e+00,  4.6100000e+00,  4.6200000e+00,  4.6300000e+00,
#[Out]#         4.6400000e+00,  4.6500000e+00,  4.6600000e+00,  4.6700000e+00,
#[Out]#         4.6800000e+00,  4.6900000e+00,  4.7000000e+00,  4.7100000e+00,
#[Out]#         4.7200000e+00,  4.7300000e+00,  4.7400000e+00,  4.7500000e+00,
#[Out]#         4.7600000e+00,  4.7700000e+00,  4.7800000e+00,  4.7900000e+00,
#[Out]#         4.8000000e+00,  4.8100000e+00,  4.8200000e+00,  4.8300000e+00,
#[Out]#         4.8400000e+00,  4.8500000e+00,  4.8600000e+00,  4.8700000e+00,
#[Out]#         4.8800000e+00,  4.8900000e+00,  4.9000000e+00,  4.9100000e+00,
#[Out]#         4.9200000e+00,  4.9300000e+00,  4.9400000e+00,  4.9500000e+00,
#[Out]#         4.9600000e+00,  4.9700000e+00,  4.9800000e+00,  4.9900000e+00])
xs, ys = np.meshgrid(points, points)
ys
#[Out]# array([[-5.  , -5.  , -5.  , ..., -5.  , -5.  , -5.  ],
#[Out]#        [-4.99, -4.99, -4.99, ..., -4.99, -4.99, -4.99],
#[Out]#        [-4.98, -4.98, -4.98, ..., -4.98, -4.98, -4.98],
#[Out]#        ...,
#[Out]#        [ 4.97,  4.97,  4.97, ...,  4.97,  4.97,  4.97],
#[Out]#        [ 4.98,  4.98,  4.98, ...,  4.98,  4.98,  4.98],
#[Out]#        [ 4.99,  4.99,  4.99, ...,  4.99,  4.99,  4.99]])
xs
#[Out]# array([[-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
#[Out]#        [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
#[Out]#        [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
#[Out]#        ...,
#[Out]#        [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
#[Out]#        [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
#[Out]#        [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99]])
z = np.sqrt(xs**2+ys++2)
z = np.sqrt(xs**2+ys**2)
z
#[Out]# array([[7.07106781, 7.06400028, 7.05693985, ..., 7.04988652, 7.05693985,
#[Out]#         7.06400028],
#[Out]#        [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,
#[Out]#         7.05692568],
#[Out]#        [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,
#[Out]#         7.04985815],
#[Out]#        ...,
#[Out]#        [7.04988652, 7.04279774, 7.03571603, ..., 7.0286414 , 7.03571603,
#[Out]#         7.04279774],
#[Out]#        [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,
#[Out]#         7.04985815],
#[Out]#        [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,
#[Out]#         7.05692568]])
import matplotlib.pyplot as plt
sys.env()
import sys
sys.env()
sys.environ()
sys.?
get_ipython().run_line_magic('pinfo', 'sys')
#
# expressing conditional logic as array opeations
#
# numpy.where is the vectorized version of 'x if cond else y'
#
xarr = np.array([1.1,1.2,1.3,1.4,1.5])
yarr = np.array([1.1,1.2,1.3,1.4,1.5]) + 1
yarr
#[Out]# array([2.1, 2.2, 2.3, 2.4, 2.5])
cond = np.array([True, false, True, True, False])
cond = np.array([True, False, True, True, False])
cond
#[Out]# array([ True, False,  True,  True, False])
#
# on way 
#
result = [(x if c else y) for x,y,c in zip(xarr, yarr, cond)]
result
#[Out]# [1.1, 2.2, 1.3, 1.4, 2.5]
# not good for large arrays since it is interpreted in python
#
# not for the vectorized form ...
#
result = np.where(cond, xarr, yarr)
results
result
#[Out]# array([1.1, 2.2, 1.3, 1.4, 2.5])
#
# suppose you want to replace positive values with 2 and negative
# values with -2, then we do thhis ...
#
arr = np.random.randn(4,4)
arr
#[Out]# array([[-0.8933196 , -1.66276173, -0.76177849,  0.27742151],
#[Out]#        [ 0.1512422 ,  1.56392344,  2.35059912,  0.20152257],
#[Out]#        [-2.2272299 ,  0.77583649, -0.04272841, -0.44912492],
#[Out]#        [-0.78583358,  0.00387695,  0.15905864,  0.97748775]])
arr > 0
#[Out]# array([[False, False, False,  True],
#[Out]#        [ True,  True,  True,  True],
#[Out]#        [False,  True, False, False],
#[Out]#        [False,  True,  True,  True]])
np.where(arr > 0, 2, -2)
#[Out]# array([[-2, -2, -2,  2],
#[Out]#        [ 2,  2,  2,  2],
#[Out]#        [-2,  2, -2, -2],
#[Out]#        [-2,  2,  2,  2]])
# only rewrite positive numbers
#
np.where(arr > 0, 2, arr)
#[Out]# array([[-0.8933196 , -1.66276173, -0.76177849,  2.        ],
#[Out]#        [ 2.        ,  2.        ,  2.        ,  2.        ],
#[Out]#        [-2.2272299 ,  2.        , -0.04272841, -0.44912492],
#[Out]#        [-0.78583358,  2.        ,  2.        ,  2.        ]])
#
# mathematical and statistical methods
#
# generate normally distributed data and some stats
#
arr = np.random.randn(5,4)
arr
#[Out]# array([[ 0.74447195, -0.46032482,  0.82072135,  1.2407427 ],
#[Out]#        [-0.33385599,  0.74657838,  1.27850632, -1.17181507],
#[Out]#        [-0.24390835,  0.99760412, -0.45289247, -0.86388121],
#[Out]#        [ 0.13111839, -1.24804036,  1.76752354, -0.14597046],
#[Out]#        [-0.56381941,  0.90113494, -0.68997597, -1.06269373]])
arr.mean()
#[Out]# 0.06956119250481506
np.mean(arr)
#[Out]# 0.06956119250481506
arr.sum()
#[Out]# 1.3912238500963012
arr.mean(axis=1)
#[Out]# array([ 0.58640279,  0.12985341, -0.14076948,  0.12615778, -0.35383854])
arr.mean(axis=0)
#[Out]# array([-0.05319868,  0.18739045,  0.54477655, -0.40072355])
#
# axis = 0 means across columns
# axis = 1 means across rows
#
arr = np.array([[0,1,2],[3,4,5],[6,7,8]])
arr
#[Out]# array([[0, 1, 2],
#[Out]#        [3, 4, 5],
#[Out]#        [6, 7, 8]])
arr.cumsum(axis=0)
#[Out]# array([[ 0,  1,  2],
#[Out]#        [ 3,  5,  7],
#[Out]#        [ 9, 12, 15]])
arr.cumsum(axis=1)
#[Out]# array([[ 0,  1,  3],
#[Out]#        [ 3,  7, 12],
#[Out]#        [ 6, 13, 21]])
arr[0]
#[Out]# array([0, 1, 2])
arr[,0]
arr[:,0]
#[Out]# array([0, 3, 6])
arr.cumprod(axis=1)
#[Out]# array([[  0,   0,   0],
#[Out]#        [  3,  12,  60],
#[Out]#        [  6,  42, 336]])
#
# basic arrays stats are:
# sum, mean, std, var, min, max, argmin, argmax, cumsum, cumprod
#
#
# methods for boolean arrays
#
arr = np.random.randn(100)
arr
#[Out]# array([ 0.69124188, -0.21154865, -0.36255049,  0.06956326, -0.66600864,
#[Out]#        -0.28562173, -0.3349677 , -1.0138918 ,  1.54712947, -1.25289134,
#[Out]#        -1.73695243, -0.39989931,  0.00391115,  2.60534288,  1.40953792,
#[Out]#         1.84943574, -0.3129483 , -0.09384333, -0.68209761, -0.56878019,
#[Out]#        -0.47471427, -0.12412724,  1.16014093, -0.79913973,  0.45304564,
#[Out]#        -0.3496867 , -0.01081995,  1.00862217,  0.62822122, -0.69368782,
#[Out]#         0.15869357,  0.46446813,  0.40252516,  0.70092867, -0.44756924,
#[Out]#         1.7726094 , -0.32911366,  0.51287073, -0.08154463,  1.66031749,
#[Out]#        -0.10432112,  0.53364166,  0.60802612,  0.11287486, -2.42614058,
#[Out]#         0.65762289,  1.42692968,  0.64180644, -0.03826076, -0.43139746,
#[Out]#        -1.16037269,  0.13954518,  1.46839669, -1.07902112,  0.46438969,
#[Out]#        -0.89294749,  0.53225544,  1.28650056, -0.50233016, -1.15980995,
#[Out]#         2.24778432, -1.5512382 ,  1.79393394, -0.52120226,  0.86054054,
#[Out]#        -0.62585485, -0.02338669,  0.933343  , -0.77386106, -0.49255246,
#[Out]#        -1.6468482 , -1.81270174, -0.4355649 , -1.1786783 ,  0.14284536,
#[Out]#         1.18059716, -0.3421751 , -0.44782565, -0.1118729 ,  1.19062974,
#[Out]#        -1.22860749, -0.76689845,  0.29796135,  0.04727933,  0.46246829,
#[Out]#         0.30421274,  0.64679924, -0.35208288, -0.57839585,  0.79560639,
#[Out]#         1.43244243, -0.74865912, -0.41416768,  1.02951945, -1.91943773,
#[Out]#         0.40384568,  0.71967761,  1.10830199,  0.51875824,  1.08840181])
(arr > 0).sum()
#[Out]# 49
arr > 0
#[Out]# array([ True, False, False,  True, False, False, False, False,  True,
#[Out]#        False, False, False,  True,  True,  True,  True, False, False,
#[Out]#        False, False, False, False,  True, False,  True, False, False,
#[Out]#         True,  True, False,  True,  True,  True,  True, False,  True,
#[Out]#        False,  True, False,  True, False,  True,  True,  True, False,
#[Out]#         True,  True,  True, False, False, False,  True,  True, False,
#[Out]#         True, False,  True,  True, False, False,  True, False,  True,
#[Out]#        False,  True, False, False,  True, False, False, False, False,
#[Out]#        False, False,  True,  True, False, False, False,  True, False,
#[Out]#        False,  True,  True,  True,  True,  True, False, False,  True,
#[Out]#         True, False, False,  True, False,  True,  True,  True,  True,
#[Out]#         True])
np.sum(arr > 0)
#[Out]# 49
bools = (arr > 0)
bools.any()
#[Out]# True
bools.all()
#[Out]# False
#
# check if any or all values are true.
#
bools
#[Out]# array([ True, False, False,  True, False, False, False, False,  True,
#[Out]#        False, False, False,  True,  True,  True,  True, False, False,
#[Out]#        False, False, False, False,  True, False,  True, False, False,
#[Out]#         True,  True, False,  True,  True,  True,  True, False,  True,
#[Out]#        False,  True, False,  True, False,  True,  True,  True, False,
#[Out]#         True,  True,  True, False, False, False,  True,  True, False,
#[Out]#         True, False,  True,  True, False, False,  True, False,  True,
#[Out]#        False,  True, False, False,  True, False, False, False, False,
#[Out]#        False, False,  True,  True, False, False, False,  True, False,
#[Out]#        False,  True,  True,  True,  True,  True, False, False,  True,
#[Out]#         True, False, False,  True, False,  True,  True,  True,  True,
#[Out]#         True])
bools.any()
#[Out]# True
bools.all()
#[Out]# False
get_ipython().system('bools')
bools
#[Out]# array([ True, False, False,  True, False, False, False, False,  True,
#[Out]#        False, False, False,  True,  True,  True,  True, False, False,
#[Out]#        False, False, False, False,  True, False,  True, False, False,
#[Out]#         True,  True, False,  True,  True,  True,  True, False,  True,
#[Out]#        False,  True, False,  True, False,  True,  True,  True, False,
#[Out]#         True,  True,  True, False, False, False,  True,  True, False,
#[Out]#         True, False,  True,  True, False, False,  True, False,  True,
#[Out]#        False,  True, False, False,  True, False, False, False, False,
#[Out]#        False, False,  True,  True, False, False, False,  True, False,
#[Out]#        False,  True,  True,  True,  True,  True, False, False,  True,
#[Out]#         True, False, False,  True, False,  True,  True,  True,  True,
#[Out]#         True])
~bools
#[Out]# array([False,  True,  True, False,  True,  True,  True,  True, False,
#[Out]#         True,  True,  True, False, False, False, False,  True,  True,
#[Out]#         True,  True,  True,  True, False,  True, False,  True,  True,
#[Out]#        False, False,  True, False, False, False, False,  True, False,
#[Out]#         True, False,  True, False,  True, False, False, False,  True,
#[Out]#        False, False, False,  True,  True,  True, False, False,  True,
#[Out]#        False,  True, False, False,  True,  True, False,  True, False,
#[Out]#         True, False,  True,  True, False,  True,  True,  True,  True,
#[Out]#         True,  True, False, False,  True,  True,  True, False,  True,
#[Out]#         True, False, False, False, False, False,  True,  True, False,
#[Out]#        False,  True,  True, False,  True, False, False, False, False,
#[Out]#        False])
# negations of arrays
~bools
#[Out]# array([False,  True,  True, False,  True,  True,  True,  True, False,
#[Out]#         True,  True,  True, False, False, False, False,  True,  True,
#[Out]#         True,  True,  True,  True, False,  True, False,  True,  True,
#[Out]#        False, False,  True, False, False, False, False,  True, False,
#[Out]#         True, False,  True, False,  True, False, False, False,  True,
#[Out]#        False, False, False,  True,  True,  True, False, False,  True,
#[Out]#        False,  True, False, False,  True,  True, False,  True, False,
#[Out]#         True, False,  True,  True, False,  True,  True,  True,  True,
#[Out]#         True,  True, False, False,  True,  True,  True, False,  True,
#[Out]#         True, False, False, False, False, False,  True,  True, False,
#[Out]#        False,  True,  True, False,  True, False, False, False, False,
#[Out]#        False])
np.sum(~bools)
#[Out]# 51
np.sum(~bools+bools)
#[Out]# 100
~bools|bools
#[Out]# array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
#[Out]#         True,  True,  True,  True,  True,  True,  True,  True,  True,
#[Out]#         True,  True,  True,  True,  True,  True,  True,  True,  True,
#[Out]#         True,  True,  True,  True,  True,  True,  True,  True,  True,
#[Out]#         True,  True,  True,  True,  True,  True,  True,  True,  True,
#[Out]#         True,  True,  True,  True,  True,  True,  True,  True,  True,
#[Out]#         True,  True,  True,  True,  True,  True,  True,  True,  True,
#[Out]#         True,  True,  True,  True,  True,  True,  True,  True,  True,
#[Out]#         True,  True,  True,  True,  True,  True,  True,  True,  True,
#[Out]#         True,  True,  True,  True,  True,  True,  True,  True,  True,
#[Out]#         True,  True,  True,  True,  True,  True,  True,  True,  True,
#[Out]#         True])
(~bools|bools).all()
#[Out]# True
(~bools&bools).all()
#[Out]# False
(~bools&bools).any()
#[Out]# False
(~bools|bools).any()
#[Out]# True
(~bools|bools).all()
#[Out]# True
#
# sorting 
#
arr = np.random.randn(6)
arr
#[Out]# array([-0.52612007,  1.35360367, -1.55638114, -0.15790131,  1.8080638 ,
#[Out]#         0.61748229])
arr.sort()
arr
#[Out]# array([-1.55638114, -0.52612007, -0.15790131,  0.61748229,  1.35360367,
#[Out]#         1.8080638 ])
arr = np.random.randn(5.3)
arr = np.random.randn(5,3)
arr
#[Out]# array([[ 0.48263339,  0.72337292, -0.67877656],
#[Out]#        [ 1.29068749, -0.02558118,  1.07957578],
#[Out]#        [-1.55556615,  0.80134417,  1.33119805],
#[Out]#        [ 0.88528942,  2.00429069, -0.41889489],
#[Out]#        [ 1.06048027,  0.87096892, -1.99812684]])
arr.sort(1)
arr
#[Out]# array([[-0.67877656,  0.48263339,  0.72337292],
#[Out]#        [-0.02558118,  1.07957578,  1.29068749],
#[Out]#        [-1.55556615,  0.80134417,  1.33119805],
#[Out]#        [-0.41889489,  0.88528942,  2.00429069],
#[Out]#        [-1.99812684,  0.87096892,  1.06048027]])
arr.sort(0)
arr
#[Out]# array([[-1.99812684,  0.48263339,  0.72337292],
#[Out]#        [-1.55556615,  0.80134417,  1.06048027],
#[Out]#        [-0.67877656,  0.87096892,  1.29068749],
#[Out]#        [-0.41889489,  0.88528942,  1.33119805],
#[Out]#        [-0.02558118,  1.07957578,  2.00429069]])
large_arr = np.random.randn(1000)
large_arr.sort()
large_arr[int(0.05*len(large_arr))]
#[Out]# -1.6492644129704308
#
# unique and other set logic
#
names = np.array(['Bob','Joe','Will','Bob','Will','Joe','Joe'])
np.unique(names)
#[Out]# array(['Bob', 'Joe', 'Will'], dtype='<U4')
get_ipython().run_line_magic('pinfo', 'np.random.randn')
np.random.rand%
get_ipython().run_line_magic('psearch', 'np.random.rand*')
get_ipython().run_line_magic('pinfo', 'np.random.randint')
randint(10)
np.random.randint(10)
#[Out]# 6
get_ipython().run_line_magic('pinfo', 'np.random.randint')
np.random.randint(low=10,size=100)
#[Out]# array([5, 3, 7, 4, 8, 1, 5, 8, 1, 1, 4, 5, 4, 3, 0, 5, 2, 6, 2, 2, 7, 7,
#[Out]#        6, 1, 2, 2, 3, 5, 5, 2, 1, 9, 4, 1, 7, 9, 1, 2, 8, 4, 0, 1, 7, 7,
#[Out]#        5, 7, 1, 8, 2, 7, 0, 4, 8, 0, 6, 6, 5, 6, 7, 6, 0, 8, 0, 3, 0, 6,
#[Out]#        5, 2, 6, 9, 7, 0, 2, 0, 8, 5, 2, 4, 2, 9, 3, 4, 1, 7, 7, 5, 3, 3,
#[Out]#        0, 7, 9, 6, 3, 4, 1, 9, 3, 5, 3, 0])
np.random.randint(low=10,size=1000)
#[Out]# array([9, 8, 2, 5, 4, 3, 1, 0, 1, 6, 0, 6, 7, 8, 9, 2, 5, 7, 9, 1, 8, 0,
#[Out]#        5, 9, 5, 5, 9, 3, 7, 3, 2, 3, 5, 5, 5, 9, 5, 4, 7, 7, 3, 1, 1, 3,
#[Out]#        8, 1, 6, 7, 7, 2, 9, 6, 7, 4, 6, 4, 7, 3, 7, 4, 5, 0, 4, 2, 1, 7,
#[Out]#        3, 7, 6, 2, 6, 4, 4, 1, 2, 2, 5, 6, 2, 1, 4, 1, 4, 8, 7, 6, 9, 5,
#[Out]#        3, 3, 6, 1, 1, 7, 2, 2, 5, 9, 5, 0, 2, 9, 4, 5, 3, 9, 0, 1, 0, 9,
#[Out]#        2, 8, 2, 5, 3, 2, 6, 7, 1, 9, 4, 0, 4, 6, 4, 7, 0, 3, 2, 7, 6, 2,
#[Out]#        6, 0, 0, 8, 9, 9, 2, 8, 1, 5, 1, 3, 9, 9, 9, 9, 8, 5, 0, 3, 9, 0,
#[Out]#        7, 3, 9, 6, 6, 8, 4, 4, 0, 2, 5, 0, 3, 8, 2, 6, 9, 7, 9, 2, 1, 0,
#[Out]#        7, 9, 7, 8, 1, 4, 1, 1, 8, 2, 6, 2, 4, 2, 7, 2, 7, 0, 0, 5, 5, 3,
#[Out]#        9, 0, 6, 9, 4, 5, 2, 2, 9, 8, 9, 6, 8, 5, 1, 1, 5, 2, 9, 6, 3, 5,
#[Out]#        9, 7, 2, 6, 7, 7, 3, 4, 4, 9, 1, 3, 5, 2, 5, 9, 4, 7, 7, 0, 2, 0,
#[Out]#        2, 9, 2, 2, 8, 4, 7, 7, 0, 6, 1, 0, 3, 1, 1, 2, 7, 5, 5, 1, 3, 9,
#[Out]#        2, 7, 4, 0, 7, 9, 5, 9, 9, 4, 0, 1, 2, 2, 5, 8, 1, 4, 8, 3, 6, 6,
#[Out]#        0, 8, 2, 2, 0, 4, 0, 1, 8, 7, 0, 0, 0, 9, 7, 8, 0, 7, 5, 8, 8, 9,
#[Out]#        9, 2, 9, 8, 8, 8, 2, 3, 2, 8, 9, 7, 3, 7, 7, 4, 0, 1, 9, 6, 1, 0,
#[Out]#        0, 6, 0, 8, 2, 0, 4, 6, 8, 8, 8, 4, 4, 8, 5, 2, 8, 8, 5, 0, 3, 0,
#[Out]#        0, 3, 3, 8, 6, 7, 8, 8, 4, 7, 7, 6, 6, 9, 1, 9, 8, 4, 4, 7, 2, 0,
#[Out]#        6, 0, 7, 4, 4, 2, 0, 7, 7, 1, 3, 8, 1, 4, 3, 2, 1, 6, 1, 7, 6, 4,
#[Out]#        1, 8, 3, 2, 2, 2, 8, 0, 8, 7, 6, 3, 7, 7, 3, 0, 5, 9, 3, 3, 3, 6,
#[Out]#        0, 1, 3, 4, 9, 7, 2, 8, 9, 3, 5, 6, 4, 6, 0, 4, 0, 0, 8, 8, 4, 4,
#[Out]#        9, 2, 2, 0, 9, 7, 5, 6, 8, 7, 6, 3, 1, 8, 7, 5, 8, 7, 8, 3, 1, 6,
#[Out]#        6, 9, 0, 5, 3, 7, 7, 3, 8, 6, 1, 6, 0, 3, 7, 1, 5, 8, 9, 9, 8, 3,
#[Out]#        5, 8, 2, 7, 9, 5, 7, 9, 1, 6, 4, 8, 5, 7, 4, 6, 3, 9, 5, 2, 7, 8,
#[Out]#        6, 2, 3, 5, 6, 6, 8, 2, 7, 7, 9, 1, 3, 1, 4, 5, 4, 9, 0, 2, 8, 1,
#[Out]#        0, 6, 8, 2, 8, 0, 1, 7, 9, 9, 4, 5, 2, 2, 6, 3, 4, 2, 0, 8, 5, 0,
#[Out]#        9, 0, 6, 2, 6, 0, 3, 5, 2, 8, 5, 3, 3, 8, 9, 7, 0, 0, 0, 3, 4, 4,
#[Out]#        7, 9, 7, 5, 9, 7, 5, 9, 3, 8, 1, 1, 1, 4, 1, 7, 4, 1, 2, 4, 8, 3,
#[Out]#        1, 6, 5, 1, 6, 8, 9, 6, 4, 4, 6, 1, 8, 4, 3, 2, 0, 6, 5, 1, 5, 9,
#[Out]#        1, 4, 1, 5, 2, 2, 7, 3, 3, 7, 2, 2, 9, 5, 5, 1, 2, 2, 2, 4, 8, 3,
#[Out]#        3, 1, 8, 3, 6, 3, 1, 3, 2, 0, 7, 9, 0, 3, 9, 6, 8, 7, 8, 7, 6, 6,
#[Out]#        7, 0, 7, 9, 5, 8, 9, 3, 3, 4, 3, 1, 7, 1, 1, 3, 7, 0, 6, 7, 6, 4,
#[Out]#        8, 3, 2, 2, 3, 2, 9, 8, 0, 4, 4, 2, 4, 8, 5, 4, 2, 5, 8, 1, 1, 4,
#[Out]#        6, 0, 3, 9, 5, 5, 2, 4, 4, 7, 9, 4, 6, 0, 4, 1, 0, 2, 5, 2, 1, 7,
#[Out]#        0, 4, 3, 7, 0, 4, 0, 4, 7, 5, 9, 4, 9, 0, 4, 8, 8, 4, 8, 0, 2, 2,
#[Out]#        5, 1, 5, 2, 4, 5, 2, 7, 0, 9, 8, 0, 2, 1, 2, 7, 6, 2, 6, 0, 7, 0,
#[Out]#        7, 9, 5, 0, 9, 9, 3, 4, 8, 3, 0, 2, 3, 4, 6, 3, 4, 2, 1, 7, 1, 1,
#[Out]#        0, 0, 9, 9, 3, 5, 7, 8, 4, 8, 5, 9, 2, 3, 0, 2, 0, 4, 6, 1, 1, 8,
#[Out]#        8, 8, 8, 2, 7, 3, 7, 1, 0, 3, 3, 5, 7, 7, 9, 5, 8, 2, 6, 5, 7, 6,
#[Out]#        7, 4, 6, 3, 6, 0, 7, 4, 3, 3, 4, 2, 6, 6, 6, 0, 9, 7, 0, 3, 0, 7,
#[Out]#        0, 7, 9, 4, 1, 3, 3, 6, 2, 4, 5, 8, 8, 3, 4, 1, 4, 3, 6, 9, 7, 1,
#[Out]#        3, 8, 6, 2, 8, 1, 5, 3, 6, 3, 7, 9, 2, 8, 8, 6, 0, 0, 2, 9, 6, 9,
#[Out]#        1, 2, 1, 9, 2, 5, 7, 1, 3, 0, 8, 1, 7, 0, 6, 9, 5, 9, 0, 7, 5, 8,
#[Out]#        7, 2, 2, 9, 4, 7, 9, 6, 2, 4, 0, 2, 8, 8, 0, 5, 4, 1, 7, 0, 9, 3,
#[Out]#        0, 6, 8, 4, 6, 9, 4, 3, 9, 4, 3, 1, 8, 5, 7, 8, 0, 8, 2, 2, 8, 1,
#[Out]#        8, 6, 1, 2, 3, 0, 0, 3, 3, 4, 1, 9, 7, 6, 7, 4, 5, 3, 5, 8, 6, 5,
#[Out]#        8, 8, 7, 0, 0, 9, 2, 8, 0, 7])
nums = np.random.randint(low=10,size=1000)
np.mean(nums)
#[Out]# 4.432
nums = np.random.randint(low=10,size=100000)
np.mean(nums)
#[Out]# 4.48398
nums = np.random.randint(low=1.high=11,size=100000)
nums = np.random.randint(low=1,high=11,size=100000)
np.mean(nums)
#[Out]# 5.50262
np.var(nums)
#[Out]# 8.2285931356
letters = np.random.randint(low=65,high=90+1,size=100)
leters
letters'
letters
#[Out]# array([80, 66, 78, 80, 72, 83, 79, 65, 90, 81, 74, 78, 67, 86, 89, 82, 66,
#[Out]#        87, 82, 87, 86, 75, 65, 88, 83, 88, 86, 70, 82, 68, 75, 81, 83, 71,
#[Out]#        88, 82, 70, 74, 73, 89, 86, 68, 74, 66, 89, 90, 85, 71, 81, 86, 75,
#[Out]#        67, 76, 81, 74, 70, 87, 85, 65, 65, 83, 67, 76, 89, 76, 81, 78, 69,
#[Out]#        82, 73, 67, 77, 84, 83, 89, 65, 90, 77, 66, 87, 69, 88, 86, 67, 80,
#[Out]#        86, 66, 70, 83, 73, 75, 66, 87, 79, 68, 67, 66, 65, 81, 90])
letters = string(np.random.randint(low=65,high=90+1,size=100))
letters = chr(np.random.randint(low=65,high=90+1,size=100))
letters = np.random.randint(low=65,high=90+1,size=100)
chr(letters)
np.chr(letters)
np.string(letters)
letters = np.random.randint(low=65,high=90+1,size=100)
type(letters)
#[Out]# numpy.ndarray
letters.view('c')
#[Out]# array([b'X', b'', b'', b'', b'', b'', b'', b'', b'Q', b'', b'', b'', b'',
#[Out]#        b'', b'', b'', b'J', b'', b'', b'', b'', b'', b'', b'', b'Y', b'',
#[Out]#        b'', b'', b'', b'', b'', b'', b'E', b'', b'', b'', b'', b'', b'',
#[Out]#        b'', b'P', b'', b'', b'', b'', b'', b'', b'', b'Q', b'', b'', b'',
#[Out]#        b'', b'', b'', b'', b'H', b'', b'', b'', b'', b'', b'', b'', b'Y',
#[Out]#        b'', b'', b'', b'', b'', b'', b'', b'T', b'', b'', b'', b'', b'',
#[Out]#        b'', b'', b'B', b'', b'', b'', b'', b'', b'', b'', b'L', b'', b'',
#[Out]#        b'', b'', b'', b'', b'', b'S', b'', b'', b'', b'', b'', b'', b'',
#[Out]#        b'N', b'', b'', b'', b'', b'', b'', b'', b'N', b'', b'', b'', b'',
#[Out]#        b'', b'', b'', b'U', b'', b'', b'', b'', b'', b'', b'', b'F', b'',
#[Out]#        b'', b'', b'', b'', b'', b'', b'C', b'', b'', b'', b'', b'', b'',
#[Out]#        b'', b'U', b'', b'', b'', b'', b'', b'', b'', b'J', b'', b'', b'',
#[Out]#        b'', b'', b'', b'', b'Q', b'', b'', b'', b'', b'', b'', b'', b'Y',
#[Out]#        b'', b'', b'', b'', b'', b'', b'', b'X', b'', b'', b'', b'', b'',
#[Out]#        b'', b'', b'Y', b'', b'', b'', b'', b'', b'', b'', b'N', b'', b'',
#[Out]#        b'', b'', b'', b'', b'', b'E', b'', b'', b'', b'', b'', b'', b'',
#[Out]#        b'U', b'', b'', b'', b'', b'', b'', b'', b'W', b'', b'', b'', b'',
#[Out]#        b'', b'', b'', b'W', b'', b'', b'', b'', b'', b'', b'', b'H', b'',
#[Out]#        b'', b'', b'', b'', b'', b'', b'P', b'', b'', b'', b'', b'', b'',
#[Out]#        b'', b'T', b'', b'', b'', b'', b'', b'', b'', b'D', b'', b'', b'',
#[Out]#        b'', b'', b'', b'', b'I', b'', b'', b'', b'', b'', b'', b'', b'V',
#[Out]#        b'', b'', b'', b'', b'', b'', b'', b'N', b'', b'', b'', b'', b'',
#[Out]#        b'', b'', b'V', b'', b'', b'', b'', b'', b'', b'', b'F', b'', b'',
#[Out]#        b'', b'', b'', b'', b'', b'Z', b'', b'', b'', b'', b'', b'', b'',
#[Out]#        b'B', b'', b'', b'', b'', b'', b'', b'', b'G', b'', b'', b'', b'',
#[Out]#        b'', b'', b'', b'G', b'', b'', b'', b'', b'', b'', b'', b'H', b'',
#[Out]#        b'', b'', b'', b'', b'', b'', b'H', b'', b'', b'', b'', b'', b'',
#[Out]#        b'', b'X', b'', b'', b'', b'', b'', b'', b'', b'Q', b'', b'', b'',
#[Out]#        b'', b'', b'', b'', b'E', b'', b'', b'', b'', b'', b'', b'', b'T',
#[Out]#        b'', b'', b'', b'', b'', b'', b'', b'W', b'', b'', b'', b'', b'',
#[Out]#        b'', b'', b'S', b'', b'', b'', b'', b'', b'', b'', b'Q', b'', b'',
#[Out]#        b'', b'', b'', b'', b'', b'V', b'', b'', b'', b'', b'', b'', b'',
#[Out]#        b'P', b'', b'', b'', b'', b'', b'', b'', b'K', b'', b'', b'', b'',
#[Out]#        b'', b'', b'', b'S', b'', b'', b'', b'', b'', b'', b'', b'R', b'',
#[Out]#        b'', b'', b'', b'', b'', b'', b'Q', b'', b'', b'', b'', b'', b'',
#[Out]#        b'', b'N', b'', b'', b'', b'', b'', b'', b'', b'Y', b'', b'', b'',
#[Out]#        b'', b'', b'', b'', b'L', b'', b'', b'', b'', b'', b'', b'', b'T',
#[Out]#        b'', b'', b'', b'', b'', b'', b'', b'I', b'', b'', b'', b'', b'',
#[Out]#        b'', b'', b'C', b'', b'', b'', b'', b'', b'', b'', b'S', b'', b'',
#[Out]#        b'', b'', b'', b'', b'', b'U', b'', b'', b'', b'', b'', b'', b'',
#[Out]#        b'W', b'', b'', b'', b'', b'', b'', b'', b'M', b'', b'', b'', b'',
#[Out]#        b'', b'', b'', b'J', b'', b'', b'', b'', b'', b'', b'', b'B', b'',
#[Out]#        b'', b'', b'', b'', b'', b'', b'Z', b'', b'', b'', b'', b'', b'',
#[Out]#        b'', b'W', b'', b'', b'', b'', b'', b'', b'', b'V', b'', b'', b'',
#[Out]#        b'', b'', b'', b'', b'X', b'', b'', b'', b'', b'', b'', b'', b'P',
#[Out]#        b'', b'', b'', b'', b'', b'', b'', b'Z', b'', b'', b'', b'', b'',
#[Out]#        b'', b'', b'Y', b'', b'', b'', b'', b'', b'', b'', b'M', b'', b'',
#[Out]#        b'', b'', b'', b'', b'', b'T', b'', b'', b'', b'', b'', b'', b'',
#[Out]#        b'D', b'', b'', b'', b'', b'', b'', b'', b'M', b'', b'', b'', b'',
#[Out]#        b'', b'', b'', b'R', b'', b'', b'', b'', b'', b'', b'', b'E', b'',
#[Out]#        b'', b'', b'', b'', b'', b'', b'D', b'', b'', b'', b'', b'', b'',
#[Out]#        b'', b'S', b'', b'', b'', b'', b'', b'', b'', b'F', b'', b'', b'',
#[Out]#        b'', b'', b'', b'', b'F', b'', b'', b'', b'', b'', b'', b'', b'K',
#[Out]#        b'', b'', b'', b'', b'', b'', b'', b'V', b'', b'', b'', b'', b'',
#[Out]#        b'', b'', b'J', b'', b'', b'', b'', b'', b'', b'', b'N', b'', b'',
#[Out]#        b'', b'', b'', b'', b'', b'N', b'', b'', b'', b'', b'', b'', b'',
#[Out]#        b'X', b'', b'', b'', b'', b'', b'', b'', b'O', b'', b'', b'', b'',
#[Out]#        b'', b'', b'', b'K', b'', b'', b'', b'', b'', b'', b'', b'I', b'',
#[Out]#        b'', b'', b'', b'', b'', b'', b'U', b'', b'', b'', b'', b'', b'',
#[Out]#        b'', b'T', b'', b'', b'', b'', b'', b'', b'', b'H', b'', b'', b'',
#[Out]#        b'', b'', b'', b'', b'B', b'', b'', b'', b'', b'', b'', b'', b'E',
#[Out]#        b'', b'', b'', b'', b'', b'', b''], dtype='|S1')
len(letters.view('c'))
#[Out]# 800
len(letters.view('uint8'))
#[Out]# 800
len(letters)
#[Out]# 100
get_ipython().run_line_magic('pinfo', 'np.cast')
get_ipython().run_line_magic('pinfo', 'np')
# unique and other set logic
#
letters
#[Out]# array([88, 81, 74, 89, 69, 80, 81, 72, 89, 84, 66, 76, 83, 78, 78, 85, 70,
#[Out]#        67, 85, 74, 81, 89, 88, 89, 78, 69, 85, 87, 87, 72, 80, 84, 68, 73,
#[Out]#        86, 78, 86, 70, 90, 66, 71, 71, 72, 72, 88, 81, 69, 84, 87, 83, 81,
#[Out]#        86, 80, 75, 83, 82, 81, 78, 89, 76, 84, 73, 67, 83, 85, 87, 77, 74,
#[Out]#        66, 90, 87, 86, 88, 80, 90, 89, 77, 84, 68, 77, 82, 69, 68, 83, 70,
#[Out]#        70, 75, 86, 74, 78, 78, 88, 79, 75, 73, 85, 84, 72, 66, 69])
np.array(100).type(chr)
np.array(100).dtype(chr)
np.array(100)?
np.array(100)
#[Out]# array(100)
get_ipython().run_line_magic('pinfo', 'np.array')
np.array(100, dtype=chr)
np.array(100, dtype='uint8')
#[Out]# array(100, dtype=uint8)
lets = np.array(100, dtype='uint8')
lets = letters
lets
#[Out]# array([88, 81, 74, 89, 69, 80, 81, 72, 89, 84, 66, 76, 83, 78, 78, 85, 70,
#[Out]#        67, 85, 74, 81, 89, 88, 89, 78, 69, 85, 87, 87, 72, 80, 84, 68, 73,
#[Out]#        86, 78, 86, 70, 90, 66, 71, 71, 72, 72, 88, 81, 69, 84, 87, 83, 81,
#[Out]#        86, 80, 75, 83, 82, 81, 78, 89, 76, 84, 73, 67, 83, 85, 87, 77, 74,
#[Out]#        66, 90, 87, 86, 88, 80, 90, 89, 77, 84, 68, 77, 82, 69, 68, 83, 70,
#[Out]#        70, 75, 86, 74, 78, 78, 88, 79, 75, 73, 85, 84, 72, 66, 69])
lets.view('c')
#[Out]# array([b'X', b'', b'', b'', b'', b'', b'', b'', b'Q', b'', b'', b'', b'',
#[Out]#        b'', b'', b'', b'J', b'', b'', b'', b'', b'', b'', b'', b'Y', b'',
#[Out]#        b'', b'', b'', b'', b'', b'', b'E', b'', b'', b'', b'', b'', b'',
#[Out]#        b'', b'P', b'', b'', b'', b'', b'', b'', b'', b'Q', b'', b'', b'',
#[Out]#        b'', b'', b'', b'', b'H', b'', b'', b'', b'', b'', b'', b'', b'Y',
#[Out]#        b'', b'', b'', b'', b'', b'', b'', b'T', b'', b'', b'', b'', b'',
#[Out]#        b'', b'', b'B', b'', b'', b'', b'', b'', b'', b'', b'L', b'', b'',
#[Out]#        b'', b'', b'', b'', b'', b'S', b'', b'', b'', b'', b'', b'', b'',
#[Out]#        b'N', b'', b'', b'', b'', b'', b'', b'', b'N', b'', b'', b'', b'',
#[Out]#        b'', b'', b'', b'U', b'', b'', b'', b'', b'', b'', b'', b'F', b'',
#[Out]#        b'', b'', b'', b'', b'', b'', b'C', b'', b'', b'', b'', b'', b'',
#[Out]#        b'', b'U', b'', b'', b'', b'', b'', b'', b'', b'J', b'', b'', b'',
#[Out]#        b'', b'', b'', b'', b'Q', b'', b'', b'', b'', b'', b'', b'', b'Y',
#[Out]#        b'', b'', b'', b'', b'', b'', b'', b'X', b'', b'', b'', b'', b'',
#[Out]#        b'', b'', b'Y', b'', b'', b'', b'', b'', b'', b'', b'N', b'', b'',
#[Out]#        b'', b'', b'', b'', b'', b'E', b'', b'', b'', b'', b'', b'', b'',
#[Out]#        b'U', b'', b'', b'', b'', b'', b'', b'', b'W', b'', b'', b'', b'',
#[Out]#        b'', b'', b'', b'W', b'', b'', b'', b'', b'', b'', b'', b'H', b'',
#[Out]#        b'', b'', b'', b'', b'', b'', b'P', b'', b'', b'', b'', b'', b'',
#[Out]#        b'', b'T', b'', b'', b'', b'', b'', b'', b'', b'D', b'', b'', b'',
#[Out]#        b'', b'', b'', b'', b'I', b'', b'', b'', b'', b'', b'', b'', b'V',
#[Out]#        b'', b'', b'', b'', b'', b'', b'', b'N', b'', b'', b'', b'', b'',
#[Out]#        b'', b'', b'V', b'', b'', b'', b'', b'', b'', b'', b'F', b'', b'',
#[Out]#        b'', b'', b'', b'', b'', b'Z', b'', b'', b'', b'', b'', b'', b'',
#[Out]#        b'B', b'', b'', b'', b'', b'', b'', b'', b'G', b'', b'', b'', b'',
#[Out]#        b'', b'', b'', b'G', b'', b'', b'', b'', b'', b'', b'', b'H', b'',
#[Out]#        b'', b'', b'', b'', b'', b'', b'H', b'', b'', b'', b'', b'', b'',
#[Out]#        b'', b'X', b'', b'', b'', b'', b'', b'', b'', b'Q', b'', b'', b'',
#[Out]#        b'', b'', b'', b'', b'E', b'', b'', b'', b'', b'', b'', b'', b'T',
#[Out]#        b'', b'', b'', b'', b'', b'', b'', b'W', b'', b'', b'', b'', b'',
#[Out]#        b'', b'', b'S', b'', b'', b'', b'', b'', b'', b'', b'Q', b'', b'',
#[Out]#        b'', b'', b'', b'', b'', b'V', b'', b'', b'', b'', b'', b'', b'',
#[Out]#        b'P', b'', b'', b'', b'', b'', b'', b'', b'K', b'', b'', b'', b'',
#[Out]#        b'', b'', b'', b'S', b'', b'', b'', b'', b'', b'', b'', b'R', b'',
#[Out]#        b'', b'', b'', b'', b'', b'', b'Q', b'', b'', b'', b'', b'', b'',
#[Out]#        b'', b'N', b'', b'', b'', b'', b'', b'', b'', b'Y', b'', b'', b'',
#[Out]#        b'', b'', b'', b'', b'L', b'', b'', b'', b'', b'', b'', b'', b'T',
#[Out]#        b'', b'', b'', b'', b'', b'', b'', b'I', b'', b'', b'', b'', b'',
#[Out]#        b'', b'', b'C', b'', b'', b'', b'', b'', b'', b'', b'S', b'', b'',
#[Out]#        b'', b'', b'', b'', b'', b'U', b'', b'', b'', b'', b'', b'', b'',
#[Out]#        b'W', b'', b'', b'', b'', b'', b'', b'', b'M', b'', b'', b'', b'',
#[Out]#        b'', b'', b'', b'J', b'', b'', b'', b'', b'', b'', b'', b'B', b'',
#[Out]#        b'', b'', b'', b'', b'', b'', b'Z', b'', b'', b'', b'', b'', b'',
#[Out]#        b'', b'W', b'', b'', b'', b'', b'', b'', b'', b'V', b'', b'', b'',
#[Out]#        b'', b'', b'', b'', b'X', b'', b'', b'', b'', b'', b'', b'', b'P',
#[Out]#        b'', b'', b'', b'', b'', b'', b'', b'Z', b'', b'', b'', b'', b'',
#[Out]#        b'', b'', b'Y', b'', b'', b'', b'', b'', b'', b'', b'M', b'', b'',
#[Out]#        b'', b'', b'', b'', b'', b'T', b'', b'', b'', b'', b'', b'', b'',
#[Out]#        b'D', b'', b'', b'', b'', b'', b'', b'', b'M', b'', b'', b'', b'',
#[Out]#        b'', b'', b'', b'R', b'', b'', b'', b'', b'', b'', b'', b'E', b'',
#[Out]#        b'', b'', b'', b'', b'', b'', b'D', b'', b'', b'', b'', b'', b'',
#[Out]#        b'', b'S', b'', b'', b'', b'', b'', b'', b'', b'F', b'', b'', b'',
#[Out]#        b'', b'', b'', b'', b'F', b'', b'', b'', b'', b'', b'', b'', b'K',
#[Out]#        b'', b'', b'', b'', b'', b'', b'', b'V', b'', b'', b'', b'', b'',
#[Out]#        b'', b'', b'J', b'', b'', b'', b'', b'', b'', b'', b'N', b'', b'',
#[Out]#        b'', b'', b'', b'', b'', b'N', b'', b'', b'', b'', b'', b'', b'',
#[Out]#        b'X', b'', b'', b'', b'', b'', b'', b'', b'O', b'', b'', b'', b'',
#[Out]#        b'', b'', b'', b'K', b'', b'', b'', b'', b'', b'', b'', b'I', b'',
#[Out]#        b'', b'', b'', b'', b'', b'', b'U', b'', b'', b'', b'', b'', b'',
#[Out]#        b'', b'T', b'', b'', b'', b'', b'', b'', b'', b'H', b'', b'', b'',
#[Out]#        b'', b'', b'', b'', b'B', b'', b'', b'', b'', b'', b'', b'', b'E',
#[Out]#        b'', b'', b'', b'', b'', b'', b''], dtype='|S1')
lets.type
lets.dtype
#[Out]# dtype('int64')
lets = np.array(100, dtype='uint8')
lets.dtype
#[Out]# dtype('uint8')
cast
get_ipython().run_line_magic('pinfo', 'cast')
names = np.array(['Bob','Joe','Will','Bob','Will','Joe','Joe'])
np.unique(names)
#[Out]# array(['Bob', 'Joe', 'Will'], dtype='<U4')
ints = np.array([3,3,3,2,2,1,1,4,4])
np.unique(ints)
#[Out]# array([1, 2, 3, 4])
#
# pure python way is ...#
#
sorted(set(names))
#[Out]# ['Bob', 'Joe', 'Will']
values = np.array([6,0,0,4,3,5,6])
np.in1d(values, [2,3,6])
#[Out]# array([ True, False, False, False,  True, False,  True])
#
# array set operations
#
# unique, intersection1d, union1d, in1d, setdiff1d, setxor1s
#
# file input and output
#
#
arr = np.arange(10)
bp.save('arr.out', arr)
np.save('arr.out', arr)
# the file is saved in a funny 
# tpe.
#
np.load('arr.out.npy')
#[Out]# array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
#
# linear algebra
#
x = np.array([[1,2,3],[4,5,6]])
y = np.array([[6,23],[-1,7],[8,9]])
x
#[Out]# array([[1, 2, 3],
#[Out]#        [4, 5, 6]])
y
#[Out]# array([[ 6, 23],
#[Out]#        [-1,  7],
#[Out]#        [ 8,  9]])
x.dot(y)
#[Out]# array([[ 28,  64],
#[Out]#        [ 67, 181]])
# or
np.dot(x,y)
#[Out]# array([[ 28,  64],
#[Out]#        [ 67, 181]])
# 
#
# matrix and array
#
np.dot(x,np.ones(3))
#[Out]# array([ 6., 15.])
#
# linear algebra packages
#
for numpy.linalg inport inv, qr
for numpy.linalg import inv, qr
from numpy.linalg import inv, qr
X = np.random.randn(5,5)
X
#[Out]# array([[-3.47233504e-01, -3.32693052e-01,  9.68030483e-01,
#[Out]#         -4.06960403e-01,  1.77768490e+00],
#[Out]#        [ 3.25760926e-01, -7.63692137e-01, -3.48351927e-01,
#[Out]#          2.07262538e+00,  7.37224600e-01],
#[Out]#        [ 5.85510472e-04,  3.50279190e-01, -1.20865834e+00,
#[Out]#          1.51546973e-01,  8.74280524e-01],
#[Out]#        [-6.19746894e-01, -8.53034012e-01,  1.51681379e+00,
#[Out]#          4.17580201e-01, -6.90719522e-01],
#[Out]#        [ 8.14795995e-01,  4.12220506e-01, -1.05371078e+00,
#[Out]#          1.03165395e+00, -2.50320212e-01]])
mat = X.T.dot(X)
inv(mat)
#[Out]# array([[ 10.03334755, -13.44796529,  -3.14857937,  -6.5030068 ,
#[Out]#          -0.39692677],
#[Out]#        [-13.44796529,  27.18071921,   8.69172142,  12.15616652,
#[Out]#           1.2623159 ],
#[Out]#        [ -3.14857937,   8.69172142,   3.35774659,   3.7770084 ,
#[Out]#           0.49081439],
#[Out]#        [ -6.5030068 ,  12.15616652,   3.7770084 ,   5.70000042,
#[Out]#           0.52085613],
#[Out]#        [ -0.39692677,   1.2623159 ,   0.49081439,   0.52085613,
#[Out]#           0.27520467]])
mat.dot(inv(mat))
#[Out]# array([[ 1.00000000e+00, -6.90692993e-15, -1.28508324e-15,
#[Out]#         -1.29263922e-15, -1.02818795e-16],
#[Out]#        [ 3.45402295e-18,  1.00000000e+00,  8.24174762e-16,
#[Out]#          9.78917396e-16, -1.62138088e-16],
#[Out]#        [-3.76280508e-16,  4.32590429e-15,  1.00000000e+00,
#[Out]#         -7.83957109e-16,  2.44572756e-17],
#[Out]#        [ 7.52116217e-15, -1.11104829e-14, -3.16829069e-15,
#[Out]#          1.00000000e+00, -3.83263451e-16],
#[Out]#        [-3.38813529e-16,  1.88071526e-15,  4.65461782e-16,
#[Out]#         -2.95383924e-16,  1.00000000e+00]])
q,r = qr(mat)
q
#[Out]# array([[-0.42033325,  0.00393371, -0.4795394 ,  0.72524887, -0.25953906],
#[Out]#        [-0.24121398, -0.48288777, -0.15598616,  0.055056  ,  0.82539226],
#[Out]#        [ 0.74160015,  0.3367749 , -0.39077486,  0.28444886,  0.32092949],
#[Out]#        [-0.46112519,  0.80180166, -0.02581818, -0.16679677,  0.34057293],
#[Out]#        [ 0.0502847 ,  0.10247291,  0.76963544,  0.60187258,  0.17994846]])
r
#[Out]# array([[-3.03252325, -1.76522467,  6.66505627, -4.18738156, -0.05601621],
#[Out]#        [ 0.        , -2.66811846,  1.61039601,  4.68392695,  0.87361761],
#[Out]#        [ 0.        ,  0.        , -1.13919778,  0.37378242,  4.12087197],
#[Out]#        [ 0.        ,  0.        ,  0.        , -0.27701481,  2.71128185],
#[Out]#        [ 0.        ,  0.        ,  0.        ,  0.        ,  0.65387139]])
#
# other functions #
#
# diag, dot, trace, det, eig, inv, pinv, qr, svd, solve, lstsq
#
#
# pseudo-random number generation
#
samples = np.random.randn(size=(4,4))
samples = np.random.normal(size=(4,4))
samples
#[Out]# array([[ 0.75224399, -1.41982105, -0.4532568 ,  0.40543667],
#[Out]#        [-0.70659581, -1.75815434,  0.26208304, -0.83405455],
#[Out]#        [-1.72753842, -0.35932819,  1.42078905, -0.27439758],
#[Out]#        [-0.68348253, -0.30880201, -1.4938153 ,  0.28933202]])
from random import normalvariate
N = 1000000
get_ipython().run_line_magic('timeit', 'samples = [normalvariate(0,1) for _ in range(N)]')
get_ipython().run_line_magic('timeit', 'np.random.normal(size=N)')
#
# to set the seed, do this:
#@
np.random.seed(3234)
#
# to generate an independent random number generator, do this:
#
rng = np.random.RandomState(1234)
rng.randn(10)
#[Out]# array([ 0.47143516, -1.19097569,  1.43270697, -0.3126519 , -0.72058873,
#[Out]#         0.88716294,  0.85958841, -0.6365235 ,  0.01569637, -2.24268495])
#
# other functions in random library.
#
# seed, permutation, shuffle, rand, randint, binomial, normal,
# betam chisquare, gamma, unijform.
#
exit()
