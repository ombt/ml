CREATE OR REPLACE PACKAGE BODY SVC_PHM_OWNER.PHM_ALGORITHM_UTILITIES_1 AS

 /************************** PHM_ALGORITHM_RUNLOG  START ********************/
 PROCEDURE PHM_ALGORITHM_RUNLOG (V_EXE_SEQ VARCHAR2,V_ID_SEQ INTEGER,V_RUN_DATE DATE,V_BATCH_NUM VARCHAR2,V_ERROR_MESSAGE VARCHAR2,VALGNAME VARCHAR2)
 IS
 V_ERROR VARCHAR2(500);
 BEGIN
     INSERT INTO svc_phm_owner.PHM_ALGORITHM_LOG VALUES (V_EXE_SEQ,V_ID_SEQ,V_RUN_DATE,V_BATCH_NUM , V_ERROR_MESSAGE,VALGNAME,SYSDATE);
 EXCEPTION
    WHEN OTHERS THEN
      V_ERROR := SQLERRM;
      DBMS_OUTPUT.PUT_LINE(V_ERROR);
 END;
 /************************** PHM_ALGORITHM_RUNLOG  END ********************/

 /************************** PHM_ALGORITHM_OUTPUT_INSERT  START ********************/
 PROCEDURE PHM_ALGORITHM_OUTPUT_INSERT (V_CUSTOMERNAME VARCHAR2,V_CUSTOMER_NUMBER VARCHAR2,V_DEVICE_ID VARCHAR2,V_SN VARCHAR2,V_COUNTRY VARCHAR2,
                                        V_CITY         VARCHAR2,V_PHM_ALGORITHM_DEFINITIONS_SK  INTEGER,V_PHM_THRESHOLDS_SK INTEGER,
                                        V_FLAG_DATE    DATE,V_DEVICE_VALUE NUMBER,V_FLAG_YN VARCHAR2,V_IHN_LEVEL3_DESC VARCHAR2,
                                        V_REMARKS  VARCHAR2,V_CREATED_BY VARCHAR2,V_PRODUCT_FAMILY VARCHAR2,V_BATCH_NUM VARCHAR2,V_PATTERN_SK INTEGER,
                                        V_RUN_DATE DATE,V_PROCESS_ID NUMBER)
 IS
   VSQLERRORMSG VARCHAR2(500);
   V_IS_MANUAL_EXEC VARCHAR2(1);
 BEGIN
 -- Populate Manual Execution field
    SELECT CASE WHEN ppa.job_id = 0 THEN 'N'
        ELSE 'Y'
        END AS IS_MANUAL_EXEC
        INTO V_IS_MANUAL_EXEC
    FROM PHM_PROCESS_AUDIT ppa
    WHERE ppa.PROCESSID=V_PROCESS_ID;

   INSERT INTO PHM_ALG_OUTPUT(CUSTOMER,    CUSTOMER_NUMBER, DEVICE_ID,    SN,COUNTRY,CITY,PHM_ALGORITHM_DEFINITIONS_SK,
                                PHM_THRESHOLDS_SK,FLAG_DATE,DEVICE_VALUE,FLAG_YN,IHN_LEVEL3_DESC,REMARKS,CREATED_BY,
                                DATE_CREATED,PRODUCT_FAMILY,BATCH_NUM,PHM_PATTERNS_SK,RUN_DATE,PROCESSID,PHM_PRODUCT_LINE_CODE,EXPERIENCE_CODE,IS_MANUAL_EXEC)
   VALUES (V_CUSTOMERNAME,V_CUSTOMER_NUMBER,V_DEVICE_ID,V_SN,V_COUNTRY,V_CITY,V_PHM_ALGORITHM_DEFINITIONS_SK,
                             V_PHM_THRESHOLDS_SK,V_FLAG_DATE,V_DEVICE_VALUE,V_FLAG_YN,V_IHN_LEVEL3_DESC,V_REMARKS,V_CREATED_BY,
                             SYSDATE,V_PRODUCT_FAMILY,V_BATCH_NUM,V_PATTERN_SK,V_RUN_DATE,V_PROCESS_ID,null,null,V_IS_MANUAL_EXEC);
 EXCEPTION
   WHEN OTHERS THEN
     VSQLERRORMSG := 'INSERTING DATA INTO PHM_ALG_OUTPUT FAILED '||V_PHM_THRESHOLDS_SK||' FOR '||V_SN||' FOR DATE '||V_FLAG_DATE||',ERROR :'||SQLERRM;
     PHM_ALGORITHM_UTILITIES_1.PHM_ALGORITHM_RUNLOG ('',V_PHM_ALGORITHM_DEFINITIONS_SK,V_RUN_DATE,V_BATCH_NUM,VSQLERRORMSG,V_CREATED_BY);
 END;
 /************************** PHM_ALGORITHM_OUTPUT_INSERT  END ********************/

 PROCEDURE PHM_ALGORITHM_OUTPUT_IN_EXP_PL (V_CUSTOMERNAME VARCHAR2,V_CUSTOMER_NUMBER VARCHAR2,V_DEVICE_ID VARCHAR2,V_SN VARCHAR2,V_COUNTRY VARCHAR2,
                                        V_CITY         VARCHAR2,V_PHM_ALGORITHM_DEFINITIONS_SK  INTEGER,V_PHM_THRESHOLDS_SK INTEGER,
                                        V_FLAG_DATE    DATE,V_DEVICE_VALUE NUMBER,V_FLAG_YN VARCHAR2,V_IHN_LEVEL3_DESC VARCHAR2,
                                        V_REMARKS  VARCHAR2,V_CREATED_BY VARCHAR2,V_PRODUCT_FAMILY VARCHAR2,V_BATCH_NUM VARCHAR2,V_PATTERN_SK INTEGER,
                                        V_RUN_DATE DATE,V_PROCESS_ID NUMBER,V_PHM_PRODUCT_LINE_SK NUMBER, V_EXPERIENCE_CODE VARCHAR2 )
 IS
   VSQLERRORMSG VARCHAR2(500);
   V_IS_MANUAL_EXEC VARCHAR2(1);

  BEGIN

 -- Populate Manual Execution field
    SELECT CASE WHEN ppa.job_id = 0 THEN 'N'
        ELSE 'Y'
        END AS IS_MANUAL_EXEC
        INTO V_IS_MANUAL_EXEC
    FROM PHM_PROCESS_AUDIT ppa
    WHERE ppa.PROCESSID=V_PROCESS_ID;

   INSERT INTO PHM_ALG_OUTPUT(CUSTOMER,    CUSTOMER_NUMBER, DEVICE_ID,    SN,COUNTRY,CITY,PHM_ALGORITHM_DEFINITIONS_SK,
                                PHM_THRESHOLDS_SK,FLAG_DATE,DEVICE_VALUE,FLAG_YN,IHN_LEVEL3_DESC,REMARKS,CREATED_BY,
                                DATE_CREATED,PRODUCT_FAMILY,BATCH_NUM,PHM_PATTERNS_SK,RUN_DATE,PROCESSID,PHM_PRODUCT_LINE_CODE,EXPERIENCE_CODE,IS_MANUAL_EXEC)
   VALUES (V_CUSTOMERNAME,V_CUSTOMER_NUMBER,V_DEVICE_ID,V_SN,V_COUNTRY,V_CITY,V_PHM_ALGORITHM_DEFINITIONS_SK,
                             V_PHM_THRESHOLDS_SK,V_FLAG_DATE,V_DEVICE_VALUE,V_FLAG_YN,V_IHN_LEVEL3_DESC,V_REMARKS,V_CREATED_BY,
                             SYSDATE,V_PRODUCT_FAMILY,V_BATCH_NUM,V_PATTERN_SK,V_RUN_DATE,V_PROCESS_ID,V_PHM_PRODUCT_LINE_SK,V_EXPERIENCE_CODE,V_IS_MANUAL_EXEC);
 EXCEPTION
   WHEN OTHERS THEN
     VSQLERRORMSG := 'INSERTING DATA INTO PHM_ALG_OUTPUT FAILED '||V_PHM_THRESHOLDS_SK||' FOR '||V_SN||' FOR DATE '||V_FLAG_DATE||',ERROR :'||SQLERRM;
     PHM_ALGORITHM_UTILITIES_1.PHM_ALGORITHM_RUNLOG ('',V_PHM_ALGORITHM_DEFINITIONS_SK,V_RUN_DATE,V_BATCH_NUM,VSQLERRORMSG,V_CREATED_BY);
 END;
 /************************** PHM_ALGORITHM_OUTPUT_INSERT  END ********************/


 /************************** PHM_GET BATCH NUMBER  START ********************/

FUNCTION PHM_GET_BATCH_NUM(V_MODE VARCHAR2, V_RUN_DATE  DATE)
RETURN VARCHAR2
AS
  V_MODE_1      VARCHAR2(20);
  V_BATCH_NUM   VARCHAR2(20);
  VSQLERRORMSG  VARCHAR2(1000);
BEGIN

    IF UPPER(V_MODE) = 'REAL TIME' THEN V_MODE_1 :=  'RLT'; END IF;
    IF UPPER(V_MODE) = 'BATCH' THEN V_MODE_1 :=  'BTH'; END IF;

    SELECT V_MODE_1||NVL(TO_CHAR(MAX(TO_NUMBER(SUBSTR(BATCH_NUM,LENGTH(V_MODE_1)+1,2)) + 1 )),'1') INTO V_BATCH_NUM
    FROM PHM_PROCESS_AUDIT WHERE RUN_DATE = TRUNC(V_RUN_DATE) AND BATCH_NUM LIKE V_MODE_1||'%';

    RETURN V_BATCH_NUM;

EXCEPTION
  WHEN OTHERS THEN
    V_BATCH_NUM := NULL;
    VSQLERRORMSG := 'GETTING BATCH ID FAILED FOR  V_RUN_DATE'||V_RUN_DATE||' FOR MODE '||V_MODE||' DUE TO ERROR :'||SQLERRM;
    PHM_ALGORITHM_UTILITIES_1.PHM_ALGORITHM_RUNLOG ('',111,V_RUN_DATE,V_BATCH_NUM,VSQLERRORMSG,'PHM_GET_BATCH_NUM');
END;
/************************** PHM_GET BATCH NUMBER  EMD ********************/

 /************************** PHM GET PROCESS ID   START ********************/

FUNCTION PHM_GET_PROCESS_ID
RETURN NUMBER
AS
  V_PROCESS_ID   NUMBER;
  VSQLERRORMSG  VARCHAR2(1000);
BEGIN

    SELECT PHM_PROCESS_ID.NEXTVAL INTO V_PROCESS_ID FROM DUAL;

    RETURN V_PROCESS_ID;

EXCEPTION
  WHEN OTHERS THEN
    V_PROCESS_ID := NULL;
    VSQLERRORMSG := 'GETTING PROCESS ID FAILED @'||SYSDATE||' DUE TO ERROR :'||SQLERRM;
    PHM_ALGORITHM_UTILITIES_1.PHM_ALGORITHM_RUNLOG ('',1110,SYSDATE,0,VSQLERRORMSG,'PHM_GET_PROCESS_ID');
END;
/************************** PHM GET PROCESS ID   EMD ********************/

/************************** PHM_PROCESS_AUDIT_LOG  START ********************/
PROCEDURE PHM_PROCESS_AUDIT_LOG(V_PROCESS_ID VARCHAR2,V_PROD_FAMILY VARCHAR2,V_PROCESS_TYPE VARCHAR,V_ROUTINE_TYPE VARCHAR,V_NAME VARCHAR,
                                V_ROUTINE_NAME VARCHAR,V_RUN_MODE VARCHAR,V_STATUS VARCHAR,V_ERROR_MSG VARCHAR,V_RUN_DATE DATE,V_RUN_TIME DATE,
                                V_BATCH_NUM VARCHAR2,V_UNIX_ID VARCHAR,V_PROCESS_TYPE_ID INTEGER)
AS
   VSQLERRORMSG VARCHAR2(500);
   V_EXISTS     NUMBER(3);
   V_JOBID     NUMBER(10) := 0;
   V_PHM_PATTERNS_SK    NUMBER(38);
 BEGIN

  BEGIN
    SELECT PHM_PATTERNS_SK
    INTO V_PHM_PATTERNS_SK
    FROM PHM_ALGORITHM_ROUTINES
        WHERE ROUTINE_NAME=V_NAME and rownum=1;

    IF PHM_CHK_ALG_FOR_MANUAL_RUN(V_PHM_PATTERNS_SK)=0 THEN
      SELECT JOB_ID INTO V_JOBID FROM(SELECT max(JOB_ID) as JOB_ID FROM PHM_ALG_EXEC_AUDIT
                                        WHERE PHM_PATTERNS_SK = V_PHM_PATTERNS_SK
                                        AND BATCH_NUM=V_BATCH_NUM
                                        AND TO_DATE(RUN_DATE,'DD-MON-YYYY') = TO_DATE(V_RUN_DATE,'DD-MON-YYYY')
                                      );
    ELSE
        V_JOBID := 0;
     END IF;
    EXCEPTION WHEN OTHERS THEN
        V_PHM_PATTERNS_SK := 0;
        V_JOBID := 0;
   END;

    SELECT COUNT(1) INTO V_EXISTS
    FROM PHM_PROCESS_AUDIT
    WHERE  RUN_DATE = V_RUN_DATE AND BATCH_NUM = V_BATCH_NUM  AND PROCESS_TYPE_ID = V_PROCESS_TYPE_ID AND PROCESSID = V_PROCESS_ID;

    IF nvl(V_EXISTS,0) > 0 THEN
      UPDATE PHM_PROCESS_AUDIT SET STATUS = V_STATUS, END_TIME = SYSDATE,
      DURATION_MIN = TRUNC((SYSDATE - START_TIME) * 60 * 24,2) ,ERROR_MESSAGE = V_ERROR_MSG
      WHERE RUN_DATE =V_RUN_DATE AND BATCH_NUM = V_BATCH_NUM AND PROCESS_TYPE_ID = V_PROCESS_TYPE_ID AND PROCESSID=V_PROCESS_ID;
    ELSE
       --IF V_STATUS = 'STARTED' THEN

         INSERT INTO PHM_PROCESS_AUDIT
         (
            PROCESSID,
            PRODUCT_FAMILY,
            PROCESS_TYPE,
            ROUTINE_TYPE,
            NAME,
            ROUTINE_NAME,
            RUN_MODE,
            START_TIME,
            END_TIME,
            STATUS,
            ERROR_MESSAGE,
            RUN_DATE,
            RUN_TIME,
            BATCH_NUM,
            UNIX_PROCESS_ID,
            DURATION_MIN,
            PROCESS_TYPE_ID,
            JOB_ID
         )
         VALUES (
         V_PROCESS_ID,
         V_PROD_FAMILY,
         V_PROCESS_TYPE,
         NVL(V_ROUTINE_TYPE,'Oracle Procedure'),
         V_NAME,
         V_ROUTINE_NAME,
         V_RUN_MODE,
         SYSDATE,
         NULL,
         V_STATUS,
         V_ERROR_MSG ,
         TRUNC(V_RUN_DATE),
         V_RUN_TIME,
         V_BATCH_NUM ,
         V_UNIX_ID,
         NULL,
         V_PROCESS_TYPE_ID,
         V_JOBID);
       --END IF;
    END IF;
    COMMIT;
 EXCEPTION
    WHEN OTHERS THEN
        VSQLERRORMSG :=  ' INSERTING/UPDATING DATA INTO PHM_PROCESS_AUDIT FAILED FOR '||V_UNIX_ID||' FOR '||V_RUN_DATE||' FOR BATCH NUM '||V_BATCH_NUM||
                         ', WITH ERROR :'|| SQLERRM;

        PHM_ALGORITHM_UTILITIES_1.PHM_ALGORITHM_RUNLOG (V_UNIX_ID,1111,V_RUN_DATE,V_BATCH_NUM,VSQLERRORMSG,'PHM_PROCESS_AUDIT_LOG');
 END;
/************************** PHM_PROCESS_AUDIT_LOG  END ********************/

/************************** PHM_PROCESS_DETAIL_AUDIT_LOG  START ********************/

PROCEDURE PHM_PROCESS_DETAIL_AUDIT_LOG (V_PROCESS_ID VARCHAR2,V_RUN_DATE IN DATE,V_TABLE_NAME VARCHAR2,V_KEY_START_VALUE VARCHAR2,V_KEY_END_VALUE VARCHAR2,V_STATUS VARCHAR2,
                                         V_ERROR_MESSAGE VARCHAR2, V_NUM_RECORDS NUMBER,V_BATCH_NUM VARCHAR2,V_NAME VARCHAR2,V_PROCESS_TYPE_ID INTEGER)
AS
   VSQLERRORMSG VARCHAR2(500);
   V_EXISTS     NUMBER(3);
 BEGIN
    SELECT COUNT(1) INTO V_EXISTS
    FROM PHM_PROCESS_DETAIL_AUDIT
    WHERE PROCESS_TYPE_ID = V_PROCESS_TYPE_ID  AND RUN_DATE =V_RUN_DATE      AND BATCH_NUM = V_BATCH_NUM   AND PROCESSID = V_PROCESS_ID;

    IF V_EXISTS > 0 THEN
      UPDATE PHM_PROCESS_DETAIL_AUDIT SET PROCESS_STATUS = V_STATUS, ERROR_MESSAGE = V_ERROR_MESSAGE, END_TIMESTAMP = SYSDATE, RECORDS_FETCHED = V_NUM_RECORDS,
      DURATION_MIN = TRUNC((SYSDATE - START_TIMESTAMP) * 60 * 24,2)
      WHERE PROCESS_TYPE_ID = V_PROCESS_TYPE_ID AND RUN_DATE =V_RUN_DATE AND BATCH_NUM = V_BATCH_NUM;
    ELSE
       --IF V_STATUS = 'STARTED' THEN
         INSERT INTO PHM_PROCESS_DETAIL_AUDIT VALUES (V_PROCESS_ID,V_RUN_DATE,V_BATCH_NUM,V_TABLE_NAME,V_KEY_START_VALUE,V_KEY_END_VALUE,SYSDATE,NULL,V_STATUS,
                                                      V_ERROR_MESSAGE,SYSDATE,NULL,NULL,NULL,V_PROCESS_TYPE_ID);


       --END IF;
    END IF;
    COMMIT;
 EXCEPTION
    WHEN OTHERS THEN
        VSQLERRORMSG :=  ' INSERTING/UPDATING DATA INTO PHM_PROCESS_AUDIT FAILED FOR '||V_BATCH_NUM||', RUN DATE'||V_RUN_DATE||' FOR '||V_TABLE_NAME || ', WITH ERROR :'|| SQLERRM;

        PHM_ALGORITHM_UTILITIES_1.PHM_ALGORITHM_RUNLOG ('',1111,V_RUN_DATE,V_BATCH_NUM,VSQLERRORMSG,'PHM_PROCESS_DETAIL_AUDIT_LOG');
 END;
/************************** PHM_PROCESS_DETAIL_AUDIT_LOG  END ********************/

/********************* PHM_GET_ODS_DETAILS START *****************************/
PROCEDURE PHM_GET_ODS_DETAILS (V_PROD_ODS_ROUTINE_SK IN NUMBER, V_ROUTINE_TYPE OUT VARCHAR2,V_PROCESS_TYPE OUT VARCHAR2,V_ROUTINE_NAME OUT VARCHAR2,
                                             V_RUN_MODE OUT VARCHAR2,V_TABLE_NAME OUT VARCHAR2,V_PROD_FAMILY OUT VARCHAR2)
AS
VSQLERRORMSG  VARCHAR2(1000);
BEGIN

    SELECT ROUTINE_TYPE,CLASSIFICATION, ROUTINE_NAME,RUN_MODE,PRODUCT_FAMILY_NAME
    INTO V_ROUTINE_TYPE, V_PROCESS_TYPE,V_ROUTINE_NAME, V_RUN_MODE, V_PROD_FAMILY
    FROM PHM_PRODUCT_FAMILY_ODS_EXTRACT O, PHM_PRODUCT_FAMILY PF WHERE O.PHM_PRODUCT_ROUTINE_SK = V_PROD_ODS_ROUTINE_SK
    AND O.PHM_PROD_FAMILY_SK = PF.PHM_PROD_FAMILY_SK;



EXCEPTION
 WHEN OTHERS THEN
   V_ROUTINE_TYPE := NULL;
   V_ROUTINE_NAME := NULL;
   V_RUN_MODE     := NULL;
   V_PROCESS_TYPE := NULL;
   V_TABLE_NAME   := NULL;
   VSQLERRORMSG :=  ' GETTING ODS DETILS FAILED FOR V_PROD_ODS_ROUTINE_SK '||V_PROD_ODS_ROUTINE_SK||', WITH ERROR :'|| SQLERRM;
   PHM_ALGORITHM_UTILITIES_1.PHM_ALGORITHM_RUNLOG ('',V_PROD_ODS_ROUTINE_SK,'',11,VSQLERRORMSG,'PHM_GET_ODS_DETAILS');
END;
/*************************** PHM_GET_ODS_DETAILS END **************************/

/********************* PHM_GET_ALG_DETAILS START *****************************/
PROCEDURE PHM_GET_ALG_DETAILS (V_ALG_SK       IN  NUMBER, 
                               VALGNAME       OUT VARCHAR2,
                               V_PROCESS_TYPE OUT VARCHAR2,
                               V_ROUTINE_NAME OUT VARCHAR2,
                               V_RUN_MODE     OUT VARCHAR2,
                               V_PROD_FAMILY  OUT VARCHAR2)
AS
VSQLERRORMSG  VARCHAR2(1000);
BEGIN

        SELECT ALGORITHM_NAME,ALGORITHM_TYPE,ALGORITHM_MODE,SQL_CODE_COMMAND,PRODUCT_FAMILY_NAME
        INTO VALGNAME,V_PROCESS_TYPE,V_RUN_MODE,V_ROUTINE_NAME,V_PROD_FAMILY
        FROM PHM_ALGORITHM_DEFINITIONS AD,PHM_PRODUCT_FAMILY PF WHERE PHM_ALGORITHM_DEFINITIONS_SK = V_ALG_SK
        AND PF.PHM_PROD_FAMILY_SK = AD.PHM_PROD_FAMILY_SK;


EXCEPTION
 WHEN OTHERS THEN

   V_ROUTINE_NAME := NULL;
   V_RUN_MODE     := NULL;
   V_PROCESS_TYPE := NULL;
   VSQLERRORMSG :=  ' GETTING ODS DETILS FAILED FOR V_PROD_ODS_ROUTINE_SK '||V_ALG_SK||', WITH ERROR :'|| SQLERRM;
   PHM_ALGORITHM_UTILITIES_1.PHM_ALGORITHM_RUNLOG ('',V_ALG_SK,'',11,VSQLERRORMSG,'PHM_GET_ODS_DETAILS');
END;
/*************************** PHM_GET_ALG_DETAILS END **************************/

/***************************PHM_GET_ODS_EXEC_DETAILS START***************************/

PROCEDURE PHM_GET_ODS_EXEC_DETAILS (V_PROCESS_TYPE_ID IN INTEGER,V_RUN_DATE IN DATE,V_BATCH_NUM IN VARCHAR2, V_KEY_TYPE IN VARCHAR2,
                                                      V_ROUTINE_TYPE IN VARCHAR2,V_ROUTINE_NAME IN VARCHAR2,V_TABLE_NAME IN VARCHAR2,
                                                      V_START_KEY OUT NUMBER,V_END_KEY OUT NUMBER,
                                                      V_START_DATE OUT DATE,V_END_DATE OUT DATE,V_RUN_TYPE OUT VARCHAR2, V_STATUS OUT VARCHAR2,
                                                      V_PROCESS_ID OUT NUMBER)
AS
  V_PRE_CHECK VARCHAR(5);
  V_PRE_RUN_DATE DATE;
  V_PRE_BATCH_NUM VARCHAR2(15);
  V_ERROR_MESSAGE VARCHAR2(1000);
BEGIN

  SELECT CASE WHEN EXISTS (SELECT * FROM  PHM_PROCESS_AUDIT WHERE RUN_DATE = V_RUN_DATE AND BATCH_NUM = V_BATCH_NUM
  AND PROCESS_TYPE_ID = V_PROCESS_TYPE_ID)
  THEN 'PRE' ELSE 'NEW' END INTO V_PRE_CHECK FROM DUAL;

  IF V_PRE_CHECK =  'PRE' THEN
    V_RUN_TYPE := 'RE_RUN';

    BEGIN
    IF V_KEY_TYPE = 'KEY_VALUE' THEN
      SELECT PROCESSID,KEY_START_VALUE,KEY_END_VALUE,PROCESS_STATUS INTO V_PROCESS_ID,V_START_KEY, V_END_KEY, V_STATUS
      FROM PHM_PROCESS_DETAIL_AUDIT WHERE RUN_DATE = V_RUN_DATE AND BATCH_NUM = V_BATCH_NUM and PROCESS_TYPE_ID = V_PROCESS_TYPE_ID;
      V_START_DATE := NULL;
      V_END_DATE := NULL;
    END IF;

    IF V_KEY_TYPE = 'DATE_VALUE' THEN
      SELECT PROCESSID, START_TIMESTAMP,END_TIMESTAMP,PROCESS_STATUS INTO V_PROCESS_ID, V_START_DATE, V_END_DATE, V_STATUS
      FROM PHM_PROCESS_DETAIL_AUDIT WHERE   RUN_DATE = V_RUN_DATE AND BATCH_NUM = V_BATCH_NUM AND PROCESS_TYPE_ID = V_PROCESS_TYPE_ID;
      V_START_KEY := NULL;
      V_END_KEY := NULL;
    END IF;


    EXCEPTION
          WHEN NO_DATA_FOUND THEN
             PHM_ALGORITHM_UTILITIES_1.PHM_ALGORITHM_RUNLOG (V_ROUTINE_NAME,111,V_RUN_DATE,V_BATCH_NUM,
             'RUNNING THE ALGORITHM FOR FIRST TIME','PHM_GET_ODS_EXEC_DETAILS');
              V_RUN_TYPE := NULL;
          WHEN OTHERS THEN
            V_RUN_TYPE := NULL;
            V_STATUS := 'FAILED';
            V_ERROR_MESSAGE := 'FAILING THE ODS AS NOT ABLE TO GET THE ODS PREVIOUS EXECUTION DETAILS DUE TO FOR  V_ROUTINE_TYPE ' ||V_ROUTINE_TYPE
                        ||'  FOR V_ROUTINE_NAME '||V_ROUTINE_NAME|| ' DUE TO ' ||SQLERRM;
             PHM_ALGORITHM_UTILITIES_1.PHM_ALGORITHM_RUNLOG (V_ROUTINE_NAME,111,V_RUN_DATE,V_BATCH_NUM,V_ERROR_MESSAGE,'PHM_GET_ODS_EXEC_DETAILS');
          END;

  ELSE
    V_RUN_TYPE := 'NEW_RUN';
    V_STATUS  :=  'NEW';

        BEGIN
        SELECT RUN_DATE, BATCH_NUM INTO V_PRE_RUN_DATE,V_PRE_BATCH_NUM
        FROM  PHM_PROCESS_AUDIT WHERE START_TIME =
        (SELECT MAX(START_TIME) FROM  PHM_PROCESS_AUDIT WHERE PROCESS_TYPE_ID = V_PROCESS_TYPE_ID
        AND START_TIME IS NOT NULL AND STATUS NOT IN ('NO_NEW_DATA')  )
        AND PROCESS_TYPE_ID = V_PROCESS_TYPE_ID AND STATUS NOT IN ('NO_NEW_DATA');

        IF V_KEY_TYPE = 'KEY_VALUE' THEN


          SELECT KEY_END_VALUE,PROCESS_STATUS INTO V_END_KEY,V_STATUS
          FROM PHM_PROCESS_DETAIL_AUDIT WHERE RUN_DATE = V_PRE_RUN_DATE AND BATCH_NUM = V_PRE_BATCH_NUM --AND TABLE_NAME = V_TABLE_NAME
          AND PROCESS_TYPE_ID = V_PROCESS_TYPE_ID AND PROCESS_STATUS NOT IN ('NO_NEW_DATA');
          V_END_DATE := NULL;

        END IF;

        IF V_KEY_TYPE = 'DATE_VALUE' THEN

          SELECT END_TIMESTAMP,PROCESS_STATUS INTO V_END_DATE,V_STATUS
          FROM PHM_PROCESS_DETAIL_AUDIT WHERE RUN_DATE = V_PRE_RUN_DATE AND BATCH_NUM = V_PRE_BATCH_NUM --AND TABLE_NAME = V_TABLE_NAME
          AND PROCESS_TYPE_ID = V_PROCESS_TYPE_ID AND PROCESS_STATUS NOT IN ('NO_NEW_DATA');
          V_END_KEY := NULL;

        END IF;

        EXCEPTION
          WHEN NO_DATA_FOUND THEN

             PHM_ALGORITHM_UTILITIES_1.PHM_ALGORITHM_RUNLOG (V_ROUTINE_NAME,111,V_RUN_DATE,V_BATCH_NUM,
             'RUNNING THE ALGORITHM FOR FIRST TIME','PHM_GET_ODS_EXEC_DETAILS');
              V_RUN_TYPE := NULL;
          WHEN OTHERS THEN

            V_RUN_TYPE := NULL;
            V_STATUS := 'FAILED';
            V_ERROR_MESSAGE := 'FAILING THE ODS AS NOT ABLE TO GET THE ODS PREVIOUS EXECUTION DETAILS DUE TO FOR  V_ROUTINE_TYPE ' ||V_ROUTINE_TYPE
                        ||'  FOR V_ROUTINE_NAME '||V_ROUTINE_NAME|| ' DUE TO ' ||SQLERRM;
            PHM_ALGORITHM_UTILITIES_1.PHM_ALGORITHM_RUNLOG (V_ROUTINE_NAME,111,V_RUN_DATE,V_BATCH_NUM,V_ERROR_MESSAGE,'PHM_GET_ODS_EXEC_DETAILS');
        END;
  END IF;

EXCEPTION
 WHEN OTHERS THEN
     V_RUN_TYPE := NULL;
     V_STATUS := 'FAILED';
     V_ERROR_MESSAGE := 'FAILING THE ODS AS NOT ABLE TO GET THE ODS PREVIOUS EXECUTION DETAILS DUE TO FOR  V_ROUTINE_TYPE ' ||V_ROUTINE_TYPE
                        ||'  FOR V_ROUTINE_NAME '||V_ROUTINE_NAME|| ' DUE TO ' ||SQLERRM;
     PHM_ALGORITHM_UTILITIES_1.PHM_ALGORITHM_RUNLOG (V_ROUTINE_NAME,111,V_RUN_DATE,V_BATCH_NUM,V_ERROR_MESSAGE,'PHM_GET_ODS_EXEC_DETAILS');
END;
/******************************PHM_GET_ODS_EXEC_DETAILS END *********************/


/************************** PHM_ALG_CHART_OUTPUT INSERT  START ********************/
 PROCEDURE PHM_ALG_CHART_INSERT (V_DEVICE_ID  VARCHAR2 ,V_PRODUCT_LINE  VARCHAR2 ,V_SN  VARCHAR2 ,V_COUNTRY  VARCHAR2 ,V_CITY  VARCHAR2 ,V_PHM_PATTERN_SK  NUMBER ,V_COMPONENT_NAME  VARCHAR2 ,
V_SUB_COMPONENT_NAME  VARCHAR2 ,V_LOG_TIMESTAMP  DATE ,V_LOG_VALUE  NUMBER ,V_LOG_TIMESTAMP_MILLSEC  VARCHAR2 ,V_CREATED_BY  VARCHAR2 ,V_DATE_CREATED  DATE ,
V_BATCH_NUM  VARCHAR2 ,V_RUN_DATE  DATE ,V_PHM_ALGORITHM_DEFINITIONS_SK  NUMBER)
 IS
   VSQLERRORMSG VARCHAR2(500);
 BEGIN

   INSERT INTO PHM_ALG_CHART_OUTPUT VALUES (V_DEVICE_ID,V_PRODUCT_LINE,V_SN,V_COUNTRY,V_CITY,V_PHM_PATTERN_SK,V_COMPONENT_NAME,V_SUB_COMPONENT_NAME,V_LOG_TIMESTAMP,V_LOG_VALUE,
V_LOG_TIMESTAMP_MILLSEC,V_CREATED_BY,V_DATE_CREATED,V_BATCH_NUM,V_RUN_DATE,V_PHM_ALGORITHM_DEFINITIONS_SK);

 EXCEPTION
   WHEN OTHERS THEN
     VSQLERRORMSG := 'INSERTING DATA INTO PHM_ALG_CHART_OUTPUT FAILED '||V_PHM_ALGORITHM_DEFINITIONS_SK||' FOR '||V_DEVICE_ID||' FOR DATE '||V_LOG_TIMESTAMP||',ERROR :'||SQLERRM;
     PHM_ALGORITHM_UTILITIES_1.PHM_ALGORITHM_RUNLOG ('',V_PHM_ALGORITHM_DEFINITIONS_SK,V_RUN_DATE,V_BATCH_NUM,VSQLERRORMSG,V_CREATED_BY);
 END;
 /************************** PHM_ALG_CHART_OUTPUT INSERT  END ********************/

/********************* PHM_GET_PL_EXP_CODE START *****************************/
PROCEDURE PHM_GET_PL_EXP_CODE (V_PHM_PATTERNS_SK IN NUMBER, V_PL IN VARCHAR2, V_LEVEL3_DESC IN VARCHAR2, PL OUT VARCHAR2, EXP_CODE OUT VARCHAR2)
IS
VSQLERRORMSG  VARCHAR2(1000);
vfound INT := 0;
CURSOR PL_EXP_CUR
IS
SELECT PP.PHM_PATTERNS_SK, PEM.PL PL_CODE, PEM.CODE,  TRIM(ESA.CODEDESC3) LEVEL3_DESC, COUNT(*) OVER (PARTITION BY PEM.PL) PL_COUNT
  FROM PHM_ALG_PL_EXP_MAPPING PEM, PHM_PATTERNS PP, PHM_EXPERIENCE_SKILL_AC ESA
 WHERE PEM.PHM_PATTERNS_SK = PP.PHM_PATTERNS_SK AND PEM.PL = ESA.PL AND PEM.CODE = ESA.CODE
       AND ESA.STATUS = 'A' AND PP.PHM_PATTERNS_SK = V_PHM_PATTERNS_SK AND PEM.PL = V_PL;
BEGIN
      FOR PE IN PL_EXP_CUR
      LOOP
        IF PE.PL_COUNT = 1 THEN
            PL := PE.PL_CODE;
            EXP_CODE := PE.CODE;
            vfound := 1;
        END IF;
        IF (vfound = 0 AND PE.PL_CODE = V_PL AND PE.LEVEL3_DESC = V_LEVEL3_DESC) THEN
            PL := PE.PL_CODE;
            EXP_CODE := PE.CODE;
            vfound := 1;
        END IF;
        EXIT WHEN vfound = 1;
      END LOOP;
EXCEPTION
 WHEN OTHERS THEN
   VSQLERRORMSG :=  ' PHM_GET_PL_EXP_CODE FAILED FOR PHM_PATTERNS_SK: ' || V_PHM_PATTERNS_SK || ', PL: ' || V_PL ||  ', LEVEL3_DESC: ' || V_LEVEL3_DESC || ', WITH ERROR: ' || SQLERRM;
   PHM_ALGORITHM_UTILITIES_1.PHM_ALGORITHM_RUNLOG (NULL, V_PHM_PATTERNS_SK, NULL, NULL, VSQLERRORMSG,'PHM_GET_PL_EXP_CODE');
END;
/*************************** PHM_GET_PL_EXP_CODE END **************************/

END PHM_ALGORITHM_UTILITIES_1;
/
